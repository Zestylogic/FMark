{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d074ce43163c70b761f7","webpack:///./src/Common/FMark.fs","webpack:///./src/FMarkFable/FMarkFable.fs","webpack:///src/Common/Types.fs","webpack:///src/Common/Shared.fs","webpack:///./src/Common/Parser/Parser.fs","webpack:///./src/Common/Logger/Logger.fs","webpack:///src/Common/Logger/Logger.fs","webpack:///src/Common/Markalc/MarkalcShared.fs","webpack:///src/Common/Lexer/LexerShared.fs","webpack:///src/FMarkFable/FMarkFable.fs","webpack:///src/Common/FMark.fs","webpack:///src/Common/Parser/Parser.fs","webpack:///src/Common/Parser/ParserHelperFuncs.fs","webpack:///src/Common/Markalc/Markalc.fs","webpack:///src/Common/Markalc/Expression.fs","webpack:///./src/Common/Markalc/Expression.fs","webpack:///src/Common/Lexer/Lexer.fs","webpack:///src/Common/Lexer/Preprocessor.fs","webpack:///src/Common/FableFileIO.fs","webpack:///external \"fs\"","webpack:///src/Common/HTMLGen/HTMLGen.fs","webpack:///src/Common/HTMLGen/HTMLGenHelpers.fs","webpack:///src/Common/MarkdownGen/MarkdownGen.fs"],"names":["append","xs","ys","seqFold","acc","x","reverse","choose","f","r","y","getValue","collect","concat","filter","where","initialize","n","Error","i","map","mapIndexed","indexed","partition","lacc","racc","replicate","singleton","slice","lower","upper","noLower","noUpper","unzip","seqFoldBack","xy","unzip3","xyz","groupBy","seqToList","seqMap","k","mapGroupBy","splitAt","index","last","first","Array","tail","head","ofArray","undefined","Enumerator","iter","cur","next","current","value","done","getEnumerator","o","GetEnumerator","Symbol","iterator","toIterator","en","MoveNext","Current","__failIfNone","res","toList","foldBack","ofList","delay","unfold","length","firstDone","iters","average","count","sum","reduce","averageBy","output","innerIter","hasFinished","compareWith","nonZero","tryFind","map2","empty","enumerateWhile","cond","enumerateThenFinally","finalFn","err","it","enumerateUsing","disp","work","isDisposed","disposeOnce","Dispose","exactlyOne","fst","snd","except","itemsToExclude","source","exclusionItems","from","testIsNotInExclusionItems","element","some","excludedItem","equals","exists","exists2","cur1","cur2","iter1","iter2","fold","isArray","ArrayBuffer","isView","arr","fold2","foldBack2","ar1","ar2","forAll","forAll2","tryHead","makeSome","initializeInfinite","tryItem","j","item","iterate","_","iterate2","iterateIndexed","iterateIndexed2","isEmpty","tryLast","mapIndexed2","map3","zs","iter3","cur3","chunkBySize","size","result","arrayChunkBySize","mapFold","transform","push","mapFoldBack","max","compare","maxBy","min","minBy","pairwise","skip","scan","permute","arrayPermute","rangeStep","step","rangeChar","String","fromCharCode","charCodeAt","range","readOnly","reduceBack","ar","seed","scanBack","skipWhile","hasPassed","sortWith","sort","sumBy","take","truncate","takeWhile","defaultValue","find","tryFindBack","findBack","tryFindIndex","findIndex","tryFindIndexBack","findIndexBack","tryPick","pick","zip","zip3","z","types","Map","setType","fullName","cons","set","getType","get","reflection","NonDeclaredType","kind","definition","generics","other","equalsRecords","Any","Unit","Option","t","FableArray","isTypedArray","def","genArg","Tuple","FableFunction","GenericParam","Interface","makeGeneric","typeDef","genArgs","isGeneric","typ","getDefinition","extendInfo","info","parent","Object","getPrototypeOf","prototype","FSymbol","newInfo","parentInfo","getOwnPropertyNames","forEach","assign","hasInterface","obj","interfaceName","interfaces","indexOf","getPropertyNames","propertyMap","properties","toString","quoteStrings","isObject","Number","Boolean","JSON","stringify","Date","dateToString","ToString","uci","cases","tag","data","join","v","ObjectRef","idMap","has","WeakMap","getHashCode","id","hash","GetHashCode","s","h","len","Equals","byteLength","dv1","DataView","buffer","dv2","getUint8","getTime","comparePrimitives","CompareTo","b1","b2","compareDates","xhash","yhash","lessThan","lessOrEqual","greaterThan","greaterOrEqual","keys","key","compareRecords","equalsUnions","compareUnions","createDisposable","createAtom","atom","arguments","CaseRules","None","LowerFirst","isList","type","createObj","fields","caseRule","casesCache","proto","caseInfo","toLowerCase","substr","toPlainJsObj","constructor","target","props","p","prop","getOwnPropertyDescriptor","apply","jsOptions","mutator","opts","round","digits","m","Math","pow","toFixed","floor","e","sign","randomNext","random","applyOperator","operator","getMethod","meth","unescapeDataString","decodeURIComponent","replace","escapeDataString","encodeURIComponent","escapeUriString","encodeURI","clear","col","splice","Some","acceptNull","defaultArg","arg","defaultArgWith","defThunk","predicate","fsFormatRegExp","formatRegExp","guidRegex","StringComparison","CurrentCulture","CurrentCultureIgnoreCase","InvariantCulture","InvariantCultureIgnoreCase","Ordinal","OrdinalIgnoreCase","cmp","ic","isIgnoreCase","isOrdinal","toLocaleLowerCase","localeCompare","args","compareTo","startsWith","str","pattern","indexOfAny","anyOf","startIndex","c","toHex","abs","printf","input","cont","fsFormat","toConsole","console","log","toConsoleError","error","toText","toFail","formatOnce","str2","rep","prefix","flags","pad","precision","format","toPrecision","toExponential","toUpperCase","plusPrefix","parseInt","isNaN","ch","padLeft","once","createPrinter","printer","strCopy","test","curried","match","idx","padSymbol","substring","exec","decs","endsWith","search","lastIndexOf","insert","isNullOrEmpty","isNullOrWhiteSpace","delimiter","xs2","validateGuid","doNotThrow","trimmed","trim","newGuid","b","a","_convertMapsInitialized","_byteToHex","_hexToByte","initConvertMaps","guidToArray","buf","Uint8Array","oct","arrayToGuid","notSupported","name","toBase64String","inArray","btoa","fromBase64String","b64Encoded","binary","atob","bytes","isRight","padRight","remove","RegExp","escape","getCharAtIndex","split","splitters","removeEmpty","splitters2","splits","reg","lastIndex","side","chars","pred","CurriedLambda","expectedArgsLength","curriedFn","args2","actualArgsLength","restArgs","newLambda","args3","Result","mapError","bind","base","List","tmp","create","vs","add","countBy","kv","MapTree","tree_sizeAux","sizeAux","tree_size","tree_empty","tree_height","_arg1","tree_isEmpty","tree_mk","l","matchValue","hl","hr","tree_rebalance","t1","t2","t1h","t2h","tree_add","comparer","Compare","tree_find","tree_tryFind","c_1","tree_partition1","acc1","acc2","tree_partitionAux","acc_0","acc_1","acc_2","acc_3","tree_partition","tree_filter1","tree_filterAux","tree_filter","tree_spliceOutSuccessor","kvl","tree_remove","tree_mem","mem","tree_iter","tree_tryPick","matchValue_1","tree_exists","tree_forall","tree_mapi","tree_foldBack","tree_fold","tree_mkFromEnumerator","tree_ofSeq","ie","tree_collapseLHS","stack","listOfArray","tree_mkIterator","started","tree_moveNext","FableMap","m2","seqCompareWith","kvp1","kvp2","tree","oldSize","containsValue","tryGetValue","rs","findKey","seqPick","tryFindKey","seqTryPick","Comparer","fromEqualityComparer","OperationCanceledError","setPrototypeOf","Trampoline","callCount","maxTrampolineCallCount","setTimeout","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","AsyncBuilder","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","offsetRegex","padWithZeros","offsetToString","offset","isMinus","hours","minutes","toHalfUTCString","date","half","toISOString","d","utc","printOffset","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","getTimezoneOffset","toISOStringWithOffset","dateWithOffset","toStringWithCustomFormat","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toStringWithOffset","toStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","DateTime","minValue","maxValue","parseRaw","parse","detectUTC","tryParse","_err","date1","year","month","day","ms","dateValue","UTC","setFullYear","now","utcNow","today","isLeapYear","daysInMonth","toUniversalTime","toLocalTime","timeOfDay","hour","minute","second","millisecond","getUTCMilliseconds","dayOfWeek","getUTCDay","getDay","dayOfYear","_year","_month","_day","ts","addDays","addHours","addMinutes","addSeconds","addMilliseconds","addYears","newMonth","newYear","_daysInMonth","newDay","addMonths","newMonth_","yearOffset","subtract","that","toLongDateString","toDateString","toShortDateString","toLongTimeString","toShortTimeString","d1","d2","xtime","ytime","op_Addition","op_Subtraction","isDaylightSavingTime","jan","jul","isDST","janOffset","julOffset","tOffset","options","unescape","isMatch","matches","global","ignoreCase","multiline","replacement","limit","replacer","sub1","_matches","sub2","Async","emptyContinuation","createCancellationToken","token","cancel","cancelAfter","isCancellationRequested","startChild","promise","startAsPromise","awaitPromise","fromContinuations","conts","then","catch","cancellationToken","defaultCancellationToken","catchAsync","choice1Of2","choice2Of2","ignore","parallel","computations","Promise","all","w","sleep","millisecondsDueTime","start","startWithContinuations","startImmediate","continuation","exceptionContinuation","cancellationContinuation","resolve","reject","Choice","TargetCons","addRangeInPlace","copyTo","sourceIndex","targetIndex","checkFlags","removeInPlace","setSlice","sortInPlaceBy","dir","bs","cs","ds","ceil","end","getSubArray","fill","QueueCell","message","MailboxQueue","itCell","firstAndLast","MailboxProcessor","messages","tryGet","__processEvents","buildMessage","checkCompletion","reply","mbox","radix","initial","parseRadix","invalidRadix2","invalidRadix8","invalidRadix10","isValid","radix_"],"mappings":"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A;;AAAA;AAAA;;AAOA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAYA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAMC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;A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","file":"fmark.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fmark\"] = factory();\n\telse\n\t\troot[\"fmark\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d074ce43163c70b761f7","export function map(f, source, TargetCons) {\n    const target = new TargetCons(source.length);\n    for (let i = 0; i < source.length; i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\nexport function mapIndexed(f, source, TargetCons) {\n    const target = new TargetCons(source.length);\n    for (let i = 0; i < source.length; i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\nexport function indexed(source) {\n    return mapIndexed((i, x) => [i, x], source, Array);\n}\nexport function addRangeInPlace(range, xs) {\n    const iter = range[Symbol.iterator]();\n    let cur = iter.next();\n    while (!cur.done) {\n        xs.push(cur.value);\n        cur = iter.next();\n    }\n}\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    while (count--) {\n        target[targetIndex++] = source[sourceIndex++];\n    }\n}\nexport function partition(f, xs) {\n    const ys = [];\n    const zs = [];\n    let j = 0;\n    let k = 0;\n    for (let i = 0; i < xs.length; i++) {\n        if (f(xs[i])) {\n            ys[j++] = xs[i];\n        }\n        else {\n            zs[k++] = xs[i];\n        }\n    }\n    return [ys, zs];\n}\nexport function permute(f, xs) {\n    // Keep the type of the array\n    const ys = xs.map(() => null);\n    const checkFlags = new Array(xs.length);\n    for (let i = 0; i < xs.length; i++) {\n        const j = f(i);\n        if (j < 0 || j >= xs.length) {\n            throw new Error(\"Not a valid permutation\");\n        }\n        ys[j] = xs[i];\n        checkFlags[j] = 1;\n    }\n    for (let i = 0; i < xs.length; i++) {\n        if (checkFlags[i] !== 1) {\n            throw new Error(\"Not a valid permutation\");\n        }\n    }\n    return ys;\n}\nexport function removeInPlace(item, xs) {\n    const i = xs.indexOf(item);\n    if (i > -1) {\n        xs.splice(i, 1);\n        return true;\n    }\n    return false;\n}\nexport function setSlice(target, lower, upper, source) {\n    const length = (upper || target.length - 1) - lower;\n    if (ArrayBuffer.isView(target) && source.length <= length) {\n        target.set(source, lower);\n    }\n    else {\n        for (let i = lower | 0, j = 0; j <= length; i++, j++) {\n            target[i] = source[j];\n        }\n    }\n}\nexport function sortInPlaceBy(f, xs, dir = 1) {\n    return xs.sort((x, y) => {\n        x = f(x);\n        y = f(y);\n        return (x < y ? -1 : x === y ? 0 : 1) * dir;\n    });\n}\nexport function unzip(xs) {\n    const bs = new Array(xs.length);\n    const cs = new Array(xs.length);\n    for (let i = 0; i < xs.length; i++) {\n        bs[i] = xs[i][0];\n        cs[i] = xs[i][1];\n    }\n    return [bs, cs];\n}\nexport function unzip3(xs) {\n    const bs = new Array(xs.length);\n    const cs = new Array(xs.length);\n    const ds = new Array(xs.length);\n    for (let i = 0; i < xs.length; i++) {\n        bs[i] = xs[i][0];\n        cs[i] = xs[i][1];\n        ds[i] = xs[i][2];\n    }\n    return [bs, cs, ds];\n}\nexport function chunkBySize(size, xs) {\n    if (size < 1) {\n        throw new Error(\"The input must be positive. parameter name: chunkSize\");\n    }\n    if (xs.length === 0) {\n        return [[]];\n    }\n    const result = [];\n    // add each chunk to the result\n    for (let x = 0; x < Math.ceil(xs.length / size); x++) {\n        const start = x * size;\n        const end = start + size;\n        result.push(xs.slice(start, end));\n    }\n    return result;\n}\nexport function getSubArray(xs, startIndex, count) {\n    return xs.slice(startIndex, startIndex + count);\n}\nexport function fill(target, targetIndex, count, value) {\n    target.fill(value, targetIndex, targetIndex + count);\n}\nexport function splitAt(index, xs) {\n    if (index < 0) {\n        throw new Error(\"The input must be non-negative.\");\n    }\n    if (index > xs.length) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n    }\n    return [xs.slice(0, index), xs.slice(index)];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Common/FMark.fs","import { permute as arrayPermute } from \"./Array\";\nimport { chunkBySize as arrayChunkBySize } from \"./Array\";\nimport List from \"./ListClass\";\nimport { getValue, makeSome } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() { return this.current; }\n    get get_Current() { return this.current; }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() { return; }\n}\nexport function getEnumerator(o) {\n    return typeof o.GetEnumerator === \"function\"\n        ? o.GetEnumerator() : new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return getValue(res);\n}\nexport function toList(xs) {\n    return foldBack((x, acc) => new List(x, acc), xs, new List());\n}\nexport function ofList(xs) {\n    return delay(() => unfold((x) => x.tail != null ? [x.head, x.tail] : null, xs));\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs) {\n    let count = 1;\n    const sum = reduce((acc, x) => {\n        count++;\n        return acc + x;\n    }, xs);\n    return sum / count;\n}\nexport function averageBy(f, xs) {\n    let count = 1;\n    const sum = reduce((acc, x) => {\n        count++;\n        return (count === 2 ? f(acc) : acc) + f(x);\n    }, xs);\n    return sum / count;\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [getValue(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? getValue(nonZero) : count(xs) - count(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function forAll(f, xs) {\n    return fold((acc, x) => acc && f(x), true, xs);\n}\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => acc && f(x, y), true, xs, ys);\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : makeSome(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? makeSome(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return makeSome(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    try {\n        return makeSome(reduce((_, x) => x, xs));\n    }\n    catch (err) {\n        return null;\n    }\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\n// A export function 'length' method causes problems in JavaScript -- https://github.com/Microsoft/TypeScript/issues/442\nexport function count(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function chunkBySize(size, xs) {\n    const result = arrayChunkBySize(size, Array.from(xs));\n    return ofArray(result);\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs) {\n    return reduce((acc, x) => compare(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs) {\n    return reduce((acc, x) => compare(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs) {\n    return reduce((acc, x) => compare(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs) {\n    return reduce((acc, x) => compare(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function permute(f, xs) {\n    return ofArray(arrayPermute(f, Array.from(xs)));\n}\nexport function rangeStep(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function range(first, last) {\n    return rangeStep(first, 1, last);\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return unfold((x) => x != null ? [x, null] : null, y);\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs) {\n    return fold((acc, x) => acc + x, 0, xs);\n}\nexport function sumBy(f, xs) {\n    return fold((acc, x) => acc + f(x), 0, xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return makeSome(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : makeSome(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/FMarkFable/FMarkFable.fs","module Types\n\ntype Language =\n    | Python\n    | FSharp\n    | CPP\n    | C\n    | Empty\n\ntype ID = FtID of int | RefID of string\n\ntype Token =\n    | CODEBLOCK of string * Language\n    | LITERAL of string\n    | WHITESPACE of size: int\n    | NUMBER of string\n    | HASH | PIPE | EQUAL | MINUS | PLUS | ASTERISK | DOT | COMMA\n    | DASTERISK | TASTERISK | UNDERSCORE | DUNDERSCORE | TUNDERSCORE | TILDE | DTILDE\n    | TTILDE | LSBRA | RSBRA | LBRA | RBRA | BSLASH | SLASH | LABRA | RABRA | LCBRA\n    | RCBRA | BACKTICK | EXCLAMATION | ENDLINE | COLON | CARET | PERCENT | SEMICOLON\n    | HEADER of int\n    | FOOTER of ID\n\ntype TFrmtedString =\n    | Strong of InlineElement list | Emphasis of InlineElement list\n    | Literal of string | Code of string\nand InlineElement =\n    | FrmtedString of TFrmtedString\n    | Link of HyperText: TFrmtedString * URL: string\n    | Picture of Alt: string * URL: string\ntype TLine = InlineElement list\n\ntype THeader = {HeaderName: TLine; Level: int}\n\ntype Ttoc = {MaxDepth: int; HeaderLst: THeader list}\n\ntype TListType = | UL | OL\ntype TList = {ListType: TListType; ListItem: TListItem list; Depth: int}\nand TListItem = NestedList of TList | StringItem of TLine\n\ntype Alignment = Centre | Right | Left | NoAlign\n\ntype Cell =\n    | Contents of Token list * Header: bool * Align:Alignment\n\ntype Row =\n    | Cells of Cell list * Header:bool\n\ntype PCell =\n    | CellLine of TLine * Header: bool * Align:Alignment\n\ntype PRow =\n    | PCells of PCell list * Header:bool\n\ntype RefFrmt = IEEE | Harvard | Chicago\ntype RefType = Book | Website\ntype Ref = {Cat: RefType option; Author: Token list option; Title: Token list option;\n            Year: int option; AccessDate: (int * int * int) option\n            URL: string option}\n\ntype ParsedObj =\n    | CodeBlock of string * Language\n    | Header of THeader\n    | ContentTable of Ttoc\n    | List of TList\n    | Paragraph of TLine list\n    | Quote of TLine\n    | Table of PRow list\n    | PreTable of Content: Token list list\n    | Footnote of ID * TLine\n\ntype Cell with \n    member c.GetToks = match c with \n                           | Contents(toks,_,_) -> toks\n    member c.ReplaceTokens t = match c with \n                               | Contents(_,head,align) -> Contents(t,head,align)\n    member c.GetHead = match c with \n                       | Contents(_,head,_) -> head\n    member c.GetParams = match c with \n                         | Contents(toks,head,align) -> toks,head,align\n\ntype OutFormat = HTML | Markdown\n\n\n// WEBPACK FOOTER //\n// src/Common/Types.fs","module Shared\n\nopen Types\nopen Logger\n\n// Helpers\n\n/// Inverse the values in a tuple\nlet invTuple (a, b) = b, a\n\n/// Try to find a key in a map, return Some value when it is found, otherwise it\n/// returns None\nlet mapTryFind k (map: Map<'a, 'b>) = map.TryFind(k)\n\n/// Try find key in a list\nlet listTryFind s =\n    List.map invTuple >> Map.ofList >> mapTryFind s\n\n/// The list of characters used in the parser\nlet charList = [\"#\", HASH; \"|\", PIPE; \"=\", EQUAL; \"-\", MINUS; \"+\", PLUS; \"*\", ASTERISK\n                \".\", DOT; \"**\", DASTERISK; \"***\", TASTERISK; \"_\", UNDERSCORE; \"__\", DUNDERSCORE\n                \"___\", TUNDERSCORE; \"~\", TILDE; \"~~\", DTILDE; \"~~~\", TTILDE; \"[\", LSBRA\n                \"]\", RSBRA; \"(\", LBRA; \")\", RBRA; @\"\\\", BSLASH; \"/\", SLASH; \"<\", LABRA\n                \">\", RABRA; \"{\", LCBRA; \"}\", RCBRA; \"`\", BACKTICK;\n                \"!\", EXCLAMATION; \":\", COLON; \"^\", CARET; \"%\", PERCENT; \",\", COMMA]\n\nlet charMap = charList |> List.map invTuple |> Map.ofList\n\nlet (|CharTok|_|) tok =\n    mapTryFind tok charMap\n\nlet mapTok = function\n    | CharTok s -> s\n    | CODEBLOCK _ -> \"CODEBLOCK\"\n    | FOOTER _ -> sprintf \"FOOTER found\"\n    | HEADER n -> sprintf \"HEADER %d\" n\n    | NUMBER s -> s\n    | LITERAL s -> s\n    | WHITESPACE n -> String.replicate n \" \"\n    | _ -> \"\\n\"\n\n/// turn all tokens into string\nlet strAllToks toks =\n    let pacMan str tok =\n        str + mapTok tok\n    List.fold pacMan \"\" toks\n\nlet mapLang lang =\n    match lang with\n    | Python -> \"python\"\n    | FSharp -> \"fsharp\"\n    | CPP -> \"cpp\"\n    | C -> \"c\"\n    | Empty -> \"\"\n\nlet xOnwards x lst = if List.length lst > x then lst.[x..] else []\nlet sOnwards s str = if String.length str > s then str.[s..] else \"\"\nlet removeChars lst s =\n            let folder (s:string) x = s.Replace(x,\"\")\n            List.fold folder s lst\nlet removeWhitespace (s:string) = \n    s |> removeChars [\"\\n\";\"\\t\";\"\\r\";\" \"]\nlet sharedLog = Logger(LogLevel.WARNING)\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Shared.fs","import FSymbol from \"./Symbol\";\nimport { compare } from \"./Util\";\nexport default class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n    [FSymbol.reflection]() {\n        return { interfaces: [\"System.IComparer\"] };\n    }\n}\nexport function fromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Common/Parser/Parser.fs","import { defaultCancellationToken } from \"./Async\";\nimport { fromContinuations } from \"./Async\";\nimport { startImmediate } from \"./Async\";\nclass QueueCell {\n    constructor(message) {\n        this.value = message;\n    }\n}\nclass MailboxQueue {\n    add(message) {\n        const itCell = new QueueCell(message);\n        if (this.firstAndLast) {\n            this.firstAndLast[1].next = itCell;\n            this.firstAndLast = [this.firstAndLast[0], itCell];\n        }\n        else {\n            this.firstAndLast = [itCell, itCell];\n        }\n    }\n    tryGet() {\n        if (this.firstAndLast) {\n            const value = this.firstAndLast[0].value;\n            if (this.firstAndLast[0].next) {\n                this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];\n            }\n            else {\n                delete this.firstAndLast;\n            }\n            return value;\n        }\n        return void 0;\n    }\n}\nexport default class MailboxProcessor {\n    constructor(body, cancellationToken) {\n        this.body = body;\n        this.cancellationToken = cancellationToken || defaultCancellationToken;\n        this.messages = new MailboxQueue();\n    }\n    __processEvents() {\n        if (this.continuation) {\n            const value = this.messages.tryGet();\n            if (value) {\n                const cont = this.continuation;\n                delete this.continuation;\n                cont(value);\n            }\n        }\n    }\n    start() {\n        startImmediate(this.body(this), this.cancellationToken);\n    }\n    receive() {\n        return fromContinuations((conts) => {\n            if (this.continuation) {\n                throw new Error(\"Receive can only be called once!\");\n            }\n            this.continuation = conts[0];\n            this.__processEvents();\n        });\n    }\n    post(message) {\n        this.messages.add(message);\n        this.__processEvents();\n    }\n    postAndAsyncReply(buildMessage) {\n        let result;\n        let continuation;\n        function checkCompletion() {\n            if (result && continuation) {\n                continuation(result);\n            }\n        }\n        const reply = {\n            reply: (res) => {\n                result = res;\n                checkCompletion();\n            },\n        };\n        this.messages.add(buildMessage(reply));\n        this.__processEvents();\n        return fromContinuations((conts) => {\n            continuation = conts[0];\n            checkCompletion();\n        });\n    }\n}\nexport function start(body, cancellationToken) {\n    const mbox = new MailboxProcessor(body, cancellationToken);\n    mbox.start();\n    return mbox;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Common/Logger/Logger.fs","module Logger\n\ntype LogLevel =\n    | DEBUG=0\n    | INFO=1\n    | WARNING=2\n    | ERROR=3\n    | FATAL=4\n\nlet logLevelStr =\n    [\n        LogLevel.DEBUG, \"DEBUG\"\n        LogLevel.INFO, \"INFO\"\n        LogLevel.WARNING, \"WARNING\"\n        LogLevel.ERROR, \"ERROR\"\n        LogLevel.FATAL, \"FATAL\"\n    ] |> Map.ofList\n\ntype Logger(logLevel) =\n\n    // create the mailbox processor\n    let agent = MailboxProcessor.Start(fun inbox -> \n\n        // the message processing function\n        let rec messageLoop () = async {\n\n            // read a message\n            let! msg = inbox.Receive()\n\n            // write it to the log\n            printfn \"%s\" msg\n\n            // loop to top\n            return! messageLoop ()\n            }\n\n        // start the loop\n        messageLoop ()\n        )\n\n    let postStr pType msg = function\n        | Some l ->\n            sprintf \"%s [%s] (%d) %s\" pType (System.DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\")) l msg |> agent.Post\n        | _ ->\n            sprintf \"%s [%s] %s\" pType (System.DateTime.Now.ToString(\"yyyy-MM-dd HH:mm:ss\")) msg |> agent.Post\n\n    let log t l msg =\n        if t >= logLevel then\n            postStr logLevelStr.[t] msg l\n        else ()\n\n    // Public API\n    member __.Log = log\n    member __.Debug = log LogLevel.DEBUG\n    member __.Info = log LogLevel.INFO\n    member __.Warn = log LogLevel.WARNING\n    member __.Error = log LogLevel.ERROR\n    member __.Fatal = log LogLevel.FATAL\n\nlet logPass line log s =\n    s |> log line\n    s\n\nlet logPassN log s =\n    s |> log None\n    s\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Logger/Logger.fs","module MarkalcShared\nopen Types\nopen System.Text.RegularExpressions\nopen Logger\n\ntype CellReference = \n    RowCol of Row:uint32*Col:uint32\n\ntype Operand =\n    | CellRef of CellReference\n    | Integer of int\n    | Float of float\n\ntype Expr =\n    | BinExp of (float->float->float)*Expr*Expr\n    | Op of Operand\n    | CommaFunction of string*(Expr list)\nlet whitespaceFilter lst = List.filter (function | WHITESPACE(_) -> false | _ -> true) lst\n// Count number of delim in token list\nlet countDelim delim tokList =\n    List.filter (function | d when d = delim -> true | _ -> false) tokList \n    |> List.length\n\n// return everything before and after the first/last delimeter searched for, error if delim not found\nlet delimSplit last delim t =\n    let rec delimSplitFirst' delim before t =\n        match t with\n        | d :: after when d = delim -> Ok (before,after) // If delim then token list, return d and everything after the delim\n        | x :: after -> delimSplitFirst' delim (x::before) after // If non-PIPE token then token list, recurse adding the tokens to the before list\n        | [] -> Error (before,[]) // Did not find delimeter\n    let rec delimSplitLast' delim before t =\n        match (t, countDelim delim t) with\n        | d :: after,1 when d = delim -> Ok (before,after)\n        | x :: after,_ -> delimSplitLast' delim (x::before) after\n        | [],_ -> Error (before,[])\n    let searchFunc = if last then delimSplitLast' else delimSplitFirst'\n    searchFunc delim [] t\n    |> function\n    | Error(before,a) -> Error(List.rev before,a)\n    | Ok (before,a) -> Ok(List.rev before,a)\n\n/// Helper function to copy a list i times\nlet rec listCopies i lst =\n    match i with\n    | 1 -> lst\n    | 0 -> []\n    | x when x < 0 -> failwithf \"Negative argument: %A\" x\n    | _ -> lst @ (listCopies (i-1) lst)\n\nlet unfoldTuple3 func (a,b,c) =\n   func a b c\n\n// Take in two cell refs and return a list of all refs inbetween or None if invalid e.g. diagonal\nlet cellRange (p1,p2) = \n    match (p1,p2) with\n    | (RowCol(p1r,p1c),RowCol(p2r,p2c)) ->\n        let genList a b = if a<b then [a..b] else [b..a]\n        match p1r = p2r, p1c = p2c with\n        | true,true -> Some [RowCol (p1r,p1c)]\n        | true,false -> (List.map ((fun i -> (p1r,i)) >> RowCol) (genList p1c p2c)) |> Some\n        | false,true -> (List.map ((fun i -> (i,p1c)) >> RowCol) (genList p1r p2r)) |> Some\n        | false,false -> None\n\n// Quick parser to generate tokenise string one row at a time\nlet simpleLex txt = \n    let (|RegexMatch|_|) r txt =\n        let m = Regex.Match (txt,\"^\"+r)\n        match m.Success with\n        | true -> (m.Value, txt.Substring(m.Value.Length)) |> Some\n        | false -> None\n    let rec simpleLex' a txt =\n        match txt with\n        // Whitespace\n        | RegexMatch \"[\\\\s]+\" (m,after) -> simpleLex' (WHITESPACE(m.Length)::a) after\n        // Contents for expression evaluation\n        | RegexMatch \"[0-9]+\" (m,after) -> simpleLex' (NUMBER(m)::a) after\n        | RegexMatch \"\\\\^\" (_,after) -> simpleLex' (CARET::a) after\n        | RegexMatch \"\\\\%\" (_,after) -> simpleLex' (PERCENT::a) after\n        | RegexMatch \"\\\\*\" (_,after) -> simpleLex' (ASTERISK::a) after\n        | RegexMatch \"\\\\/\" (_,after) -> simpleLex' (SLASH::a) after\n        | RegexMatch \"\\\\+\" (_,after) -> simpleLex' (PLUS::a) after\n        | RegexMatch \"\\\\-\" (_,after) -> simpleLex' (MINUS::a) after\n        | RegexMatch \"\\\\(\" (_,after) -> simpleLex' (LBRA::a) after\n        | RegexMatch \"\\\\)\" (_,after) -> simpleLex' (RBRA::a) after\n        | RegexMatch \"\\\\[\" (_,after) -> simpleLex' (LSBRA::a) after\n        | RegexMatch \"\\\\]\" (_,after) -> simpleLex' (RSBRA::a) after\n        | RegexMatch \"\\\\=\" (_,after) -> simpleLex' (EQUAL::a) after\n        | RegexMatch \"\\\\.\" (_,after) -> simpleLex' (DOT::a) after\n        | RegexMatch \"\\\\,\" (_,after) -> simpleLex' (COMMA::a) after\n        | RegexMatch \"\\\\{\" (_,after) -> simpleLex' (LCBRA::a) after\n        | RegexMatch \"\\\\}\" (_,after) -> simpleLex' (RCBRA::a) after\n        // Contents for table recognition\n        | RegexMatch \"[a-zA-z]+[0-9]*( [a-zA-z]+[0-9]*)*\" (m,after) -> simpleLex' (LITERAL(m)::a) after\n        | RegexMatch \"\\\\|\" (_,after) -> simpleLex' (PIPE::a) after\n        | RegexMatch \"\\\\:\" (_,after) -> simpleLex' (COLON::a) after\n        | RegexMatch \"\\\\;\" (_,after) -> simpleLex' (SEMICOLON::a) after\n        | \"\" -> a\n        | _ -> failwithf \"Unexpected character: %A\" txt\n    simpleLex' [] txt |> List.rev\n\n// Experimental Lexr for tokenising from entire table string\n// let stringLex (txt:string)=\n//     List.map simpleLex (Array.toList (txt.Split(\"\\n\")))\nlet lexY (x,y,z) = x,y|>simpleLex,z\n\nlet logger = Logger(LogLevel.INFO)\n\n\n// WEBPACK FOOTER //\n// src/Common/Markalc/MarkalcShared.fs","module LexerShared\nopen System.Text.RegularExpressions\n\n// --------------------------------------------------\n// Helpers\n// --------------------------------------------------\n\n/// Take the first element of a tuple of size 3\nlet takeFirst (a, _, _) = a\n\n/// Match a regular expression Return Some (m,grps) where m is the match string,\n/// grps is the list of match groups (if any) return None on no match\nlet strRegexMatch (regex: string) (str: string) =\n    let m = Regex(regex).Match(str)\n    if m.Success\n    then\n        let mLst = [ for x in m.Groups -> x.Value ]\n        Some (List.head mLst, List.tail mLst)\n    else None\n\n/// Checks if a string starts with another string\nlet strStartsWith (value: string) (str: string) =\n    str.StartsWith(value)\n\n/// Convert a single character to a string\nlet toString (c: char) =\n    System.String.Concat [c]\n\n/// Replace a every occurence of one string in the string s by another\nlet strReplace (o: string) (n: string) (s: string) =\n    s.Replace(o, n)\n\n// --------------------------------------------------\n// Shared\n// --------------------------------------------------\n\n/// Active Pattern to match a string with a regex pattern, returns the matched string\n/// together with the groups in a list and the rest of the string\nlet (|RegexMatch|_|) regex str =\n    match strRegexMatch regex str with\n    | None -> None\n    | Some (m, grp) ->\n        let lchar = String.length m\n        Some (m, grp, str.[lchar..])\n\n/// Create a regular expression for a literal that matches everything except the\n/// characters defined in charList\nlet literalString charList =\n\n    /// Escapes every special regex character in a string given to it\n    let addEscape (c, _) =\n        [\"\\\\\"; \".\"; \"^\"; \"$\"; \"*\"; \"+\"; \"-\"; \"?\"; \"(\"; \")\"; \"[\"; \"]\"; \"{\"; \"}\"; \"|\"; \"/\"]\n        |> List.fold (fun st n -> strReplace n (\"\\\\\"+n) st) c\n\n    charList\n    |> List.map (addEscape >> (fun a -> a+\"|\"))\n    |> List.fold (+) \"\"\n    |> (fun c -> \"^.+?(?=\\\\s|\"+c+\"$)\")\n\n/// Tests if a string starts with any of the characters in charList,\n/// and returns the match after passing it through the retLastMatch\n/// function, that will be used in a fold operation with None as a starting\n/// value\nlet (|CharMatch|_|) retLastMatch a charList (str: string) =\n    let testStartWith (c, t) =\n        let ch = a + c\n        strStartsWith ch str, ch, t\n    List.map testStartWith charList\n    |> List.fold retLastMatch None\n\n/// Checks if a string starts with a character defined in charList, and returns the DU value\n/// associated with it\nlet (|Character|_|) charList (str: string) =\n    let retLastMatch i = function\n        | true, c, t -> Some (t, str.[String.length c..])\n        | _ -> i\n    (|CharMatch|_|) retLastMatch \"\" charList str\n\n/// Checks if a string starts with an escaped char of any character in charList, and returns it\n/// by passing the text of the last matched value to a constructor 'tType'\nlet (|EscapedChar|_|) tType charList (str: string) =\n    let retLastMatch i = function\n        | true, (c: string), _ -> Some (tType c.[1..], str.[String.length c..])\n        | _ -> i\n    (|CharMatch|_|) retLastMatch \"\\\\\" charList str\n\n/// Match a single group with a regex\nlet (|GroupMatch|_|) str = function\n    | RegexMatch str (m, [t], r) -> Some t\n    | _ -> None\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Lexer/LexerShared.fs","module Main\nopen Types\nopen FMark\n\nlet processMarkdownString fileDir str =\n    str\n    |> Array.toList\n    |> processString fileDir HTML\n\n\n\n// WEBPACK FOOTER //\n// src/FMarkFable/FMarkFable.fs","module FMark\n\nopen Types\n\nlet preLexParse dir = \n    Preprocessor.preprocessListWithDir dir\n    >> Lexer.lexList\n    >> Parser.parse\nlet processString' dir formatFunc =\n    preLexParse dir >> Result.map formatFunc\n\nlet processString dir format =\n    match format with\n    | f when f = HTML -> processString' dir (HTMLGen.strBody)\n    | f when f = Markdown -> processString' dir (MarkdownGen.mdBody)\n    | _ -> failwithf \"Invalid format type generated, this should not be possible.\"\n\n\n\n// WEBPACK FOOTER //\n// src/Common/FMark.fs","module Parser\nopen Types\nopen Shared\nopen ParserHelperFuncs  \n\n// helper functions\n\n\n/// parse inline code\nlet rec parseCode toks =\n    match toks with\n    | BACKTICK::_ -> (\"\", toks.[1..]) |> Ok\n    | tok::toks' ->\n        parseCode toks'\n        |> Result.map (fun (str, tks) ->\n        mapTok tok + str, tks )\n    | e ->  sharedLog.Warn None (sprintf \"%A\" e)\n            (\"\\\\`\", xOnwards 1 toks) |> Ok\n\n/// parse inline text, including links and pictures, terminates when nothing left\nlet parseInLineElements toks =\n    let attachInlineEle front back ele =\n        [front;ele;back]\n    let rec parseInLineElements' currentLine toks =\n        match toks with\n        | MatchSym BACKTICK (content, rtks) -> (content|> strAllToks|> Code|> FrmtedString )::currentLine, rtks\n        | MatchEm (content, rtks, frontLiteral, backLiteral) ->\n            let inlineContent = (parseInLines [] content |> Emphasis |> FrmtedString)\n            match frontLiteral, backLiteral with\n                | Some fl, Some bl ->\n                    [bl;inlineContent;fl]\n                | Some fl, None ->\n                    [inlineContent;fl]\n                | None, Some bl ->\n                    [bl;inlineContent]\n                | None, None ->\n                    [inlineContent]\n            |> (fun x -> x@currentLine), rtks\n        | _ ->\n            let str = mapTok toks.[0]\n            FrmtedString (Literal str)::currentLine, xOnwards 1 toks\n    and parseInLines currentLine toks =\n        match toks with\n        | [] -> []\n        | _ ->\n            let (newLine, retoks) = parseInLineElements' currentLine toks\n            match retoks with\n            | [] -> newLine |> List.rev\n            | _ ->\n                parseInLines newLine retoks\n                |> combineLiterals\n    parseInLines [] toks\n\n/// parse a paragraph which counts for contents in  `<p>`\n/// parseParagraph eats 2>= ENDLINEs\nlet parseParagraph toks =\n    let parseParagraph' lines tokLine = (parseInLineElements tokLine) :: lines\n    toks\n    |> trimENDLINEs\n    |> cutIntoLines\n    |> List.fold parseParagraph' []\n    |> List.rev\n    |> Paragraph\n\n/// match table start sequence\n/// return table rows, terminates when [] or two continuous ENDLINEs\n/// start sequence:\n/// something in first line, at least one '|' and three '-' in second line\nlet (|MatchTable|_|) toks =\n    // transform table rows into Table or Pretable depending if valid table.\n    let tableTransform (rows,rtks) =\n        rows |> Markalc.parseEvaluateTable\n        |> function\n        | Ok(rows) -> \n            let toPCellList (cell:Cell) = \n                let toks,head,align = (cell.GetParams) \n                let pCellLine = toks |> parseInLineElements\n                CellLine(pCellLine,head,align)\n            let toPRow row = \n                let clst, rHead = row |> function | Cells(clst',rHead') -> clst',rHead'\n                PCells(List.map toPCellList clst, rHead)// Create PRows\n            // For each row, unpack into Cell list\n            (List.map toPRow rows |> Table,rtks) |> Some\n        | Error(_)-> None\n    match toks with\n    | MatchTableHead rtks ->\n        match rtks with\n        | MatchTableFormater _ -> cutTableRows toks |> tableTransform\n        | _ -> None\n    | _ -> None\n\n/// parse supported `ParsedObj`s, turn them into a list\n/// assuming each item start at the beginning of the line\n/// the returned token head does not have 2>= ENDLINE\nlet rec parseItem (rawToks: Token list) : Result<ParsedObj * Token list, string> =\n    let toks = deleteLeadingENDLINEs rawToks\n    match toks with\n    | CODEBLOCK (content, lang) :: toks' -> (CodeBlock(content, lang), toks') |> Ok\n    | MatchListOpSpace _ -> \"Lists todo\" |> Error\n    | MatchTable (rows, rtks) -> (rows, rtks) |> Ok\n    | MatchQuote (content, rtks) ->\n        (parseInLineElements content |> Quote , rtks)\n        |> Ok\n    | MatchHeader (level, content, rtks) ->\n        let line = parseInLineElements content\n        (Header{HeaderName=line; Level=level}, rtks)\n        |> Ok\n    | PickoutParagraph (par, retoks) ->\n        (parseParagraph par, retoks) |> Ok\n    | _ -> sprintf \"Parse item did not match: %A\" toks |> removeChars [\"[\";\"]\"] |> Error\n\nand parseItemList toks : Result<ParsedObj list * option<Token list>, string> =\n    match (List.isEmpty toks, not (List.exists (function | WHITESPACE(_) | ENDLINE -> false | _ -> true) toks)) with\n    | (false,false) -> \n        parseItem toks\n        |> Result.bind (fun (pobj, re) ->\n            match List.isEmpty re with\n            | true -> ([pobj], None) |> Ok\n            | false ->\n                parseItemList re\n                |> Result.map(fun (pobjs, re') ->\n                    pobj::pobjs, re' )\n        )\n    | _ -> ([], None) |> Ok // if tokens are only whitespace or endlines, return no parsedObjs\n\n/// top-level Parser, which the user should use\n/// `parse` will either return result monad with either `ParsedObj list` or a string of Error message.\n/// Unparsed Tokens will be in the returned in the Error message.\nlet parse toks =\n    parseItemList toks\n    |> Result.bind (fun (pobjs, retoks) ->\n        match retoks with\n        | None -> pobjs |> Ok\n        | Some retoks -> sprintf \"Some unparsed tokens: %A\" retoks |> Error)\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Parser/Parser.fs","module ParserHelperFuncs\nopen Types\nopen Shared\n\nlet SPACE = \" \"\nlet NOSTRING = \"\"\n\ntype TEmphasis = UNDER | STAR // underscore and asterisk\n\ntype ParagraphState = {Par: Token list; ReToks: Token list; ParMatched: bool}\n\n/// delete leading ENDLINEs and return the rest\nlet rec deleteLeadingENDLINEs toks =\n    match toks with\n    | ENDLINE:: tks -> deleteLeadingENDLINEs tks\n    | _ -> toks\n\nlet deleteTrailingENDLINEs toks =\n    toks\n    |> List.rev\n    |> deleteLeadingENDLINEs\n    |> List.rev\n\nlet trimENDLINEs toks =\n    toks\n    |> deleteLeadingENDLINEs\n    |> deleteTrailingENDLINEs\n\n/// convert all Tokens into a single string\n/// see mapTok for Token mapping\nlet stringAllTokens toks =\n    let matchTok i tok =\n        i + mapTok tok\n    List.fold matchTok \"\" toks\n\n/// count subsquent and continuous Tokens\nlet countToks (tok: Token) toks =\n    let rec countToks' (n, toks') =\n        match toks' with\n        | t:: rtks when t = tok -> countToks' (n+1, rtks)\n        | _ -> n, toks'\n    countToks' (0, toks) |> fst\n\n/// count leading continuous spaces\nlet countSpaces toks =\n    let rec countToks' (n, toks') =\n        match toks' with\n        | WHITESPACE no:: rtks -> countToks' (n+no, rtks)\n        | _ -> n, toks'\n    countToks' (0, toks) |> fst\n\n/// count leading continuoues ENDLINEs\nlet countNewLines = countToks (ENDLINE)\n\n/// count all pipes in a line\nlet countDelim delim toks =\n    let counter tok =\n        match tok with\n        | t when t =delim ->1\n        | _ -> 0\n    List.sumBy counter toks\nlet countPipes = countDelim PIPE\nlet countMinus = countDelim MINUS\n\n/// first element is the line\n/// second element is remaining tokens\nlet cutFirstLine toks =\n    let rec cutLine' line rtks =\n        match rtks with\n        | ENDLINE:: rtks -> line |> List.rev, rtks\n        | tok:: rtks -> cutLine' (tok::line) rtks\n        | [] -> line |> List.rev, []\n    cutLine' [] toks\n\n/// process token list into lines of tokens, no ENDLINE in the end\nlet cutIntoLines toks =\n    let rec cutIntoLines' tokLines toks =\n        let endlineSpliter = function | ENDLINE -> true | _ -> false\n        match List.tryFindIndex endlineSpliter toks with\n        | None -> toks::tokLines |> List.rev\n        | Some idx ->\n            match List.splitAt idx toks with\n            | (tokLine, retoks) ->\n                let tokLineNoEL = tokLine |> deleteTrailingENDLINEs\n                cutIntoLines' (tokLineNoEL::tokLines) retoks.Tail\n    toks\n    |> cutIntoLines' []\n\n/// combine adjacent FrmtedString(Literal \"something\")\nlet combineLiterals line =\n    let combiner line inlineEle =\n        let doNothing = inlineEle::line\n        match List.head line with\n        | FrmtedString (Literal l) ->\n            match inlineEle with\n            | FrmtedString (Literal s) -> FrmtedString (Literal (l+s)) :: line.Tail\n            | _ -> doNothing\n        | _ -> doNothing\n    line\n    |> List.tail\n    |> List.fold combiner [List.head line]\n    |> List.rev\n\n\n/// match start and end symbol for formatting\n/// return the match content, w/o the symbols\n/// and the rest tokens\nlet (|MatchSym|_|) sym toks =\n    match toks with\n    | t::tl when t = sym ->\n        match List.tryFindIndex (fun s -> s=sym) (List.tail toks) with\n        | Some idx ->\n            let (content, restTks) = List.splitAt idx tl\n            (content, List.tail restTks) |> Some\n        | None -> None\n    | _ -> None\n\n/// match paragraph\n/// return paragraph contents, w/o trailing ENDLINE,\n/// and the rest tokens, w/o leading ENDLINE\nlet (|PickoutParagraph|_|) toks =\n    match toks with\n    | [] -> None\n    | _ ->\n        let folder state tok =\n            let {Par=par;ReToks=reToks;ParMatched=matched} = state\n            if matched then\n                {state with ReToks=tok::reToks}\n            else\n                match tok with\n                | ENDLINE when List.head par = ENDLINE -> {Par=List.tail par;ReToks=reToks;ParMatched=true}\n                | _ -> {state with Par=tok::par}\n        let initState = {Par=[];ReToks=[];ParMatched=false}\n        match List.fold folder initState toks with\n        | {Par=par;ReToks=reToks} ->\n            (par |> List.rev, reToks |> List.rev |> deleteLeadingENDLINEs) |> Some\n\n\n\n/// match underscore and asterisk emphasis start squence\n/// match underscore and asterisk emphasis end sequence\n/// return content of emphasis, the rest of line,\n/// and the necessary edge InlineElement\n/// e.g. ` _i_`, the edge InlineElements are `Some(FrmtedString(Literal \" \"))` and `None`\nlet (|MatchEm|_|) toks =\n    let attachInlineEle front back = Option.map (fun (x,y) -> x,y,front,back)\n    match toks with\n    | WHITESPACE _:: UNDERSCORE:: WHITESPACE _:: _ -> None      // not em\n    | WHITESPACE frontWhite:: UNDERSCORE:: potential ->\n        let frontLiteral = String.replicate frontWhite \" \" |> Literal |> FrmtedString |> Some\n        let rec endFinder content toks =\n            match toks with\n            | [] -> None\n            | WHITESPACE _:: UNDERSCORE:: WHITESPACE _:: rtks -> // keep finding\n                endFinder (List.append content toks.[0..2]) rtks\n            | _:: UNDERSCORE:: WHITESPACE backWhite:: rtks ->\n                let backLiteral = String.replicate backWhite \" \" |> Literal |> FrmtedString |> Some\n                (List.append content [List.head toks], rtks)\n                |> Some\n                |> attachInlineEle frontLiteral backLiteral\n            | _::[UNDERSCORE] ->\n                (List.append content [List.head toks], [])\n                |> Some\n                |> attachInlineEle frontLiteral None\n            | _ ->\n                xOnwards 1 toks\n                |> endFinder (List.append content [toks.[0]])\n        endFinder [] potential\n    | ASTERISK:: WHITESPACE _:: _ -> None // not asterisk em\n    | ASTERISK:: potential ->\n        let rec endFinder content toks =\n            match toks with\n            | [] -> None\n            | WHITESPACE _:: ASTERISK:: rtks -> // keep finding\n                endFinder (List.append content toks.[0..1]) rtks\n            | _:: ASTERISK:: rtks ->\n                (List.append content [List.head toks], rtks)\n                |> Some\n                |> attachInlineEle None None\n            | _ ->\n                xOnwards 1 toks\n                |> endFinder (List.append content [toks.[0]])\n        endFinder [] potential\n    | _ -> None\n\n/// match new paragraph sequence\n/// return Token list after EDNLINEs\nlet (|MatchNewParagraph|_|) toks =\n    match countNewLines toks with\n    | n when n>=2 -> toks.[n..] |> Some\n    | _ -> None\n\n/// turn head Token into string\n/// return head Token string and tail Token list\nlet (|MatchMapTok|_|) = function\n    | tok:: toks -> (mapTok tok, toks) |> Some\n    | _ -> None\n\n/// match hashes\n/// returns no of hashes, the first non-WHITESPACE token list\n/// and the tokens in next lines\nlet (|MatchHeader|_|) toks =\n    let rec countHashes n tks =\n        match tks with\n        | HASH:: tks' -> countHashes (n+1) tks'\n        | _ -> n\n    match countHashes 0 toks with\n    | no when no > 0 ->\n        match toks.[no..] with\n        | WHITESPACE _ :: toks' ->\n            toks'|> cutFirstLine\n            |> (fun (f,s) -> no, f,s)\n            |> Some // omit whitespace\n        | _ -> None\n    | _ -> None\n\n/// match quote\nlet (|MatchQuote|_|) toks =\n    match toks with\n    | RABRA:: rtks ->\n        rtks\n        |> cutFirstLine\n        |> Some\n    | _ -> None\n\n/// match list begin sequence w/o spaces\n/// return list type and Token list after start sequence\nlet (|MatchList|_|) toks =\n    match toks with\n    | NUMBER _:: DOT:: WHITESPACE _:: toks' -> (OL, toks') |> Some\n    | ASTERISK:: WHITESPACE _:: toks' -> (UL, toks') |> Some\n    | _ -> None\n\n/// match list begin sequence with optional spaces\n/// return list type and Token list after start sequence\nlet (|MatchListOpSpace|_|) toks =\n    match toks with\n    | WHITESPACE _:: MatchList content -> content |> Some\n    | MatchList content -> content |> Some\n    | _ -> None\n\n/// return the next line\n/// next line is seperated by 1 ENDLINE\nlet (|MatchTableHead|_|) toks =\n    let line, rtks = cutFirstLine toks\n    match line with\n    | [] -> None\n    | _ -> rtks |> Some\n\n/// take one PIPE\n/// return the rest |> Some\n/// otherwise, None\nlet pipeMatch oToks =\n    oToks\n    |> Option.bind (fun toks ->\n        match toks with\n        | PIPE:: rtks -> Some rtks\n        | _ -> None )\n\n/// take all leading subsequent MINUSes\n/// return the rest Tokens |> Some\n/// otherwise, None\nlet minusMatch oToks =\n    let takeAwayMinuses toks =\n        let rec takeAwayMinuses' n toks =\n            match toks with\n            | MINUS:: rtks -> takeAwayMinuses' (n+1) rtks\n            | _ -> n, toks\n        takeAwayMinuses' 0 toks\n    oToks\n    |> Option.bind (fun toks ->\n        let n, rtks = toks |> takeAwayMinuses \n        if n>0 then\n            Some rtks\n        else\n            None\n        )\n\n/// match the table formater line\n/// the table formater is usually the second line of a table\n/// return the rest Tokens |> Some\n/// otherwise, None\nlet (|MatchTableFormater|_|) toks =\n    let line, rtks = cutFirstLine toks\n    match (countPipes line, countMinus line) with\n    | (p,m) when p>0 && m>2 -> Some(rtks)\n    | _ -> None\n\n/// cut Tokens into Token list list for Table parsing\n/// terminates when [] or two continuous ENDLINEs\n/// return Token list list,\n/// remaining Token list\nlet cutTableRows toks =\n    let rec cutTableRow' rows toks =\n        match toks with\n        | ENDLINE:: rtks -> rows |> List.rev, rtks // one endline followed by another\n        | [] -> rows |> List.rev, []\n        | _ ->\n            let row, rtks = cutFirstLine toks\n            cutTableRow' (row::rows) rtks\n    cutTableRow' [] toks\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Parser/ParserHelperFuncs.fs","module Markalc\n\nopen Types\nopen Shared\nopen MarkalcShared\nopen Expression\nopen Logger\n\ntype MapContents =\n    | MapTok of Cell\n    | MapExp of Expr * Cell\n\n// ################### HELPER FUNCTIONS ###################\n/// Return everything (before,after) the first PIPE token\nlet pipeSplit toks = \n    delimSplit false PIPE toks\n// Turn float into token\nlet toToken x = NUMBER(x|>string)\n/// Transform Result<Ok,Error> list into Result<Ok list, Error>\nlet joinErrorList lst =\n    // Filter the list\n    let filt x = match x with\n                 | Error(_) -> true\n                 | Ok(_) -> false\n    let unpackOks = function\n                 | Ok(x') -> x'\n                 | Error(y) -> failwithf \"After filtering, there were still Error monads in the list %A.\" y\n    let combineErrors s x = match x with\n                            | Ok(_) -> s // This should never be matched in this usage.\n                            | Error(x') -> sprintf \"%A %A\" x' s |> Error\n    match List.filter filt lst with\n    | [] -> List.map unpackOks lst |> Ok // If the list is empty there are no errors\n    | x  -> List.fold combineErrors (Error \"\") x\n// Lift first argument to result world\nlet liftFirstArg func arg1 arg2 =\n    match arg1 with\n    | Ok(x) -> func x arg2 |> Ok\n    | Error(x) -> Error x\n\n// ####################### CONSTRUCT CELL HELPERS ###################\nlet makeCellU header tokens  = (tokens,header)\nlet defaultCellU = makeCellU false\nlet headCellU = makeCellU true\nlet alignCell alignment cellU = Contents (fst cellU, snd cellU, alignment)\n\n// ###################### PARSE TABLE ROWS #####################\n// Parse a line into a list of cells\nlet parsePipesD debug constructCell (row:Token list) =\n    let rec parsePipes' a row =\n        match pipeSplit row with\n        | Ok([],[])       -> (constructCell []):: a\n        | Ok([],after)    -> sprintf \"empty, %A\" after |> logger.Debug None\n                             parsePipes' ((constructCell [])::a) after // If before is empty and after is not, empty cell\n        | Ok(before,[])   -> sprintf \"%A, empty\" before |> logger.Debug None\n                             (constructCell before) :: a // If after is empty, add before and stop\n        | Ok(before,after) -> sprintf \"%A, %A\" before after |> logger.Debug None\n                              parsePipes' ((constructCell before) :: a) after\n        | Error(_) -> if List.isEmpty row then a else (constructCell row)::a  // If there is content, add it\n    parsePipes' [] row\nlet parsePipes constructCell row = parsePipesD false constructCell row /// TOGGLE DEBUG MODE\n/// Parse an ordinary row\nlet parseRow constructCell row =\n    let parseRow' = parsePipes constructCell\n    // If its the first pipe and there's nothing before it, remove it\n    match row with\n    | PIPE :: row' -> parseRow' row'\n    | row' -> parseRow' row'\n    // If the list only contains one item, add an empty cell on the end (empty cells now added later on...)\n    |> (fun x -> if List.length x = 1 then (constructCell[])::x else x) \n    |> List.rev\nlet parseDefaultRow = parseRow defaultCellU\n/// Parse the second row of the table which defines number of columns and alignment\nlet parseAlignRow (row:Token list) = \n    let getAlignment (toks: Token list) =\n        let filt = function | COLON -> true | MINUS -> true | _ -> false \n        // Check it has at least three dashes\n        match (countDelim MINUS toks < 3, List.filter filt toks |> List.length <> List.length toks) with\n            | (true,false) -> \"Less than 3 dashes for table format\" |> Error \n            | (false,true) -> sprintf \"Invalid characters in table format, expecting only : or - \\n%A\\n%A\" toks (List.filter filt toks) |> Error\n            | (true,true) -> \"Less than 3 dashes for table format and invalid characters\" |> Error \n            | (false,false) ->\n                match (List.rev toks, countDelim COLON toks) with\n                | (COLON :: _, 2) when List.head toks = COLON -> Centre |> Ok\n                | (COLON :: _, 1) -> Right |> Ok\n                | (_,1) when List.head toks = COLON -> Left |> Ok\n                | (_,0) -> NoAlign |> Ok\n                | (_,x) -> sprintf \"\\':\\'s in wrong position %A, %A\" toks x |> Error\n    let parseAlign' = parsePipes getAlignment\n    // Ignore the first pipe if there is nothing before it\n    match whitespaceFilter row with\n    | PIPE :: row' -> parseAlign' row'\n    | row' -> parseAlign' row'\n    |> List.rev\n    |> joinErrorList\n\n// ################ BUSINESS END ###############\n/// Function which takes a parsed row (list of unalignedcells) and the list of alignments, and will create Cells\nlet alignCells' alignList (row:(Token list * bool) list * bool) =\n    let cells = fst row\n    let head = snd row\n    let lengths = (List.length alignList, List.length cells)\n    match (fst lengths - snd lengths) with\n    | x when x > 0 -> cells @ (List.replicate x ([], head)) // If alignList longer than cells, fill in with blank cells\n    | x when x < 0 -> cells.[0..((fst lengths)-1)]// If cells longer than alignList, ignore the extra cells\n    | _ -> cells\n    |> (List.zip alignList)\n    |> List.map (fun (a,uc) -> alignCell a uc),head\n\nlet alignCells = liftFirstArg alignCells'\n/// Separate list of tokens into cells with alignment and header/not-header\nlet transformTable (table:Token list list)  =\n    // Deal with first two rows of format: header1 | header2 | header3\n    // Second row tells us how many columns and correct alignment\n    let alignments = table.[1] |> parseAlignRow\n    // Specify header value true/false and make Row type from cellList\n    let makeRow head cells = (cells,head)\n\n    let header = List.head table \n                 |> parseRow headCellU \n                 |> makeRow true \n                 |> alignCells alignments \n                 |> (Result.map Cells)\n\n    // Fold parse normal row for the rest of the table\n    let parseAlignPrepend s x = (parseRow defaultCellU x \n                                |> makeRow false \n                                |> alignCells alignments  \n                                |> (Result.map Cells)) :: s\n    List.fold parseAlignPrepend [header] (xOnwards 2 table)\n    |> List.rev\n    |> joinErrorList\n\n// Try to evaluate expression, set maxRefs to number of CellRefs before assuming circular reference\nlet tryEval' maxRefs map e =\n    // Evaluate expression\n    let rec evalExp r map e =\n        // Evaluate cell reference\n        let evalCellRef ref = \n            match Map.tryFind ref map with\n            | Some(MapExp(e2,_)) -> evalExp (r+1) map e2\n            | _ -> nan // invalid reference\n        // Apply f over list of cell references between two cells\n        let rangeFunc f x y = match cellRange (x,y) with\n                              | Some(l) -> f l\n                              | None -> nan\n        if r > maxRefs then nan else // Return nan if too many recursive calls, probably circular reference\n        match e with\n        | BinExp(f,x,y) -> f (evalExp r map x) (evalExp r map y)\n        | Op (Float(x)) -> x\n        | Op (CellRef(ref)) -> evalCellRef ref\n        | CommaFunction(\"SUM\",l) -> List.sumBy (evalExp r map) l\n        | CommaFunction(\"AVG\",l) -> List.averageBy (evalExp r map) l\n        | CommaFunction(\"MIN\",l) -> List.min (List.map (evalExp r map) l)\n        | CommaFunction(\"MAX\",l) -> List.max (List.map(evalExp r map) l)\n        | _ -> 11.0\n    evalExp 0 map e\nlet tryEval = tryEval' 1000\n/// Evaluate all expressions inside a cell list list, leave non-expression cells as they are\n/// No invalid expressions should be matched.\nlet evaluateRowList (rowList:Row list) = \n    // Infer Row header value from (List.head cellList) and create Row\n    // cellList must not be empty, which is ensured by earlier code\n    let inferRow (cellList:Cell list) = Cells(cellList, (List.head cellList).GetHead)\n    // Iterate over table, snd s is current column number.\n    let innerFold row (s:(CellReference*MapContents) list * uint32) (cell:Cell) =\n        let cCol = snd s // current column\n        let cCoord,cMap = RowCol(row,cCol),fst s // current coordinate and map\n        match parseExpression (cell.GetToks) with\n        | Ok(ex) ->   (cCoord,MapExp (ex,cell)) :: cMap, cCol + 1u  // Expression found, put it into the map!\n        | Error(_) -> (cCoord,MapTok (cell)) :: cMap, cCol + 1u // No expression, ignore\n    // fst s is current row, pass it through to inner fold\n    let outerFold (s:uint32* ((CellReference*MapContents) list * uint32)) cells =\n        let cRow,cMap = fst s, fst (snd s) // current row\n        (cRow + 1u, List.fold (innerFold (cRow)) (cMap,0u) cells)\n    let cellList = List.collect (function | Cells(l,_) -> [l]) rowList\n    let rowLength = List.length (List.head cellList)\n    List.fold outerFold (0u,([],0u)) cellList \n    |> function \n    | (_,(expRefList,_)) -> \n        let expList = List.rev expRefList\n        let map = Map.ofList expList\n        // Iterate over list, evaluate expression for each MapExp then convert into Token list\n        // convert MapContents from MapExp to MapTok (?)\n        let expListEval = function\n            | MapTok(c) -> c\n            | MapExp(e,c) -> [tryEval map e |> toToken] |> (c.ReplaceTokens)\n        List.map (snd >> expListEval) expList\n        |> (Seq.chunkBySize rowLength) \n        |> Seq.toList \n        |> List.map (Array.toList>>inferRow)\n\n/// Top level function\n/// Parse tokens into cell list list with all Expressions evaluated.\n/// Return: Result(OK(Cell list list), Error(toks))\nlet parseEvaluateTable (toks:Token list list) = \n    // Transform Token list list into Cell list list\n    let endlFilt = function | ENDLINE -> false | _ -> true\n    transformTable (List.map (List.filter endlFilt) toks)\n    |> function\n    | Error(_) -> toks |> Error // If there are any errors just return the unchanged Token list list\n    | Ok(x) -> evaluateRowList x |> Ok // Else return Ok and Cell list list\n\nlet lexParseEvaluate toks = \n    List.map simpleLex toks\n    |> parseEvaluateTable\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Markalc/Markalc.fs","/// This module should parse tokens into an expression\nmodule Expression\n\nopen MarkalcShared\nopen Types\n\n(* SUPPORTED OPERATIONS:\nBinaryExpressions (in order of precedence): \n    % - Modulo\n    ^ - To the power\n    * - Multiply\n    / - Divide\n    + - Add\n    - - Subtract\n*)\n// HELPER FUNCTIONS\nlet makeFloat i d = \n    sprintf \"%A.%A\" i d |> float\nlet makeInt (i:string) =\n    i |> int\nlet makeCellReference (row:string,col:string) =\n    RowCol(row|>uint32,col|>uint32)\n// [row=3,col=2]\n// ]2=col,3=row[\n// [row=3,col=2] [3,42]\n/// EXPRESSION PARSER\nlet parseExp toks = \n    let rec (|Expression|_|) (toks:Token list) =\n        let (|NumberPat|_|) = function\n            | NUMBER(i) :: DOT :: NUMBER(d) :: after -> (makeFloat i d, after) |> Some\n            | NUMBER(i) :: after -> (makeInt i |> float, after) |> Some\n            | _ -> None\n        let rec (|CellRefPat|_|) = function\n            | RSBRA :: NUMBER(col) :: COMMA :: NUMBER(row) :: LSBRA :: after \n                -> ((row,col) |> makeCellReference,after) |> Some\n            | RSBRA :: NUMBER(row) :: EQUAL :: LITERAL(\"row\") :: COMMA :: NUMBER(col) :: EQUAL :: LITERAL(\"col\") :: LSBRA :: after \n                -> sprintf \"Row:%A, Col:%A\" row col |> logger.Debug None\n                   ((row,col) |> makeCellReference,after) |> Some\n            | RSBRA :: NUMBER(col) :: EQUAL :: LITERAL(\"col\") :: COMMA :: NUMBER(row) :: EQUAL :: LITERAL(\"row\") :: LSBRA :: after \n                ->  sprintf \"Row:%A, Col:%A\" row col |> logger.Debug None\n                    ((row,col) |> makeCellReference,after) |> Some\n            | _ -> None\n        let rec (|ExpressionList|_|) = function\n            | Expression(exp,COMMA::ExpressionList(exps,after)) -> (exp::exps,after) |> Some\n            | CellRefPat(x,COLON::CellRefPat(y,after)) -> cellRange (x,y) |> function\n                | Some lst -> (List.map (CellRef >> Op) lst,after) |> Some\n                | _ -> None\n            | Expression(exp,after) -> ([exp],after) |> Some\n            | _ -> None\n        // DEFINE FUNCTIONS\n        let funcConstruct funcname = function\n        | RCBRA :: ExpressionList (lst,LCBRA::LITERAL(funcname)::after) ->\n            (CommaFunction(funcname,lst),after) |> Some\n        | _ -> None\n        let (|Sum|_|) = funcConstruct \"SUM\"\n        let (|Avg|_|) = funcConstruct \"AVG\"\n        let (|Min|_|) = funcConstruct \"MIN\"\n        let (|Max|_|) = funcConstruct \"MAX\"\n        \n        let (|FunctionPat|_|) = function\n            | Sum (x,after)  -> (x,after) |> Some\n            | Avg (x,after)  -> (x,after) |> Some\n            | Min (x,after)  -> (x,after) |> Some\n            | Max (x,after)  -> (x,after) |> Some\n            | _ -> None\n\n        let (|BasePat|_|) = function\n            | NumberPat (x,after) -> (x |> Float |> Op,after) |> Some\n            | FunctionPat (x,after) -> (x,after) |> Some\n            // Parsing in reverse so right and left brackets swapped\n            | CellRefPat (x,after) -> (x |> CellRef |> Op,after) |> Some\n            | RBRA :: Expression (x,LBRA::after) -> (x,after) |> Some\n            | _ -> None\n        // Active pattern to construct precedence-aware active patterns; descends recursively until highest precedence match.\n        // Quirk: Returns right-associative results, so parsing in reverse to get left-associativity.\n        let rec (|HOFPat|_|) (|PrevPat|_|) op (t:Token) = function\n            | PrevPat (exp1, after) -> \n                match after with\n                | x :: (HOFPat (|PrevPat|_|) op t (exp2, after')) when x = t -> \n                    (BinExp (op, exp2, exp1), after') |> Some // exp1 and exp2 swapped because parsing in reverse\n                | _ -> (exp1, after) |> Some\n            | _ -> None\n        // Build precendence and normal binary operators\n        let patPrecedence = [(%),PERCENT;( **),CARET;(*),ASTERISK;(/),SLASH;(-),MINUS;( + ),PLUS]\n        let constructPatterns s x = ((|HOFPat|_|) (List.head s) (fst x) (snd x))::s\n        let patterns = List.fold constructPatterns [(|BasePat|_|)] patPrecedence\n        let (|FirstPat|_|) = List.head patterns\n\n        // Unary operators, only negative number so far. Doesn't work.\n        // let (|UnaryOperators|_|) = function\n        //     | FirstPat (exp1, after) ->\n        //         match after with\n        //         // Negative Numbers\n        //         | NumberPat(x,MINUS::after') -> (-x |> Float |> Op,after') |> Some\n        //         // ... Could have more patterns here.\n        //         | _ -> (exp1,after) |> Some\n        //     | _ -> None\n\n        match toks with\n        | FirstPat x -> Some x\n        | _ -> None\n    match List.rev toks with \n    | Expression (exp,[]) -> Ok exp\n    | _ ->  sprintf \"Not valid expression %A\" toks |> Error\n\nlet parseExpression toks = \n    match toks with\n    | EQUAL :: tail -> \n         whitespaceFilter tail |> parseExp |> function\n             | Error(e) -> Error toks\n             | Ok(x) ->  Ok x\n    | toks -> Error toks\n\n// ################## TEST FUNCTIONS ####################\n// Recursively evaluate expression AST. CellRef will need access to whole table, this is used to test everything else\nlet rec evalExpTest e = \n    match e with\n    | BinExp(f,x,y) -> f (evalExpTest(x)) (evalExpTest(y))\n    | Op (Float(x)) -> x\n    | _ -> 13.0\n\n// Test evaluation without table\nlet parseExpTest (toks:Token list) =\n    whitespaceFilter toks // Remove whitespace\n    |> parseExp\n    |> function\n       | Error(e) -> printfn \"Error parsing expression: %A\" e\n                     Error toks \n       | Ok(x) -> evalExpTest x |> Ok\n\n\n// WEBPACK FOOTER //\n// src/Common/Markalc/Expression.fs","const parseRadix = /^\\s*([\\+\\-])?(0[xob])?([0-9a-fA-F]+)\\s*$/;\nconst invalidRadix2 = /[^01]/;\nconst invalidRadix8 = /[^0-7]/;\nconst invalidRadix10 = /[^0-9]/;\nexport function isValid(s, radix) {\n    const res = parseRadix.exec(s);\n    if (res != null) {\n        if (radix == null) {\n            switch (res[2]) {\n                case \"0b\":\n                    radix = 2;\n                    break;\n                case \"0o\":\n                    radix = 8;\n                    break;\n                case \"0x\":\n                    radix = 16;\n                    break;\n                default:\n                    radix = 10;\n                    break;\n            }\n        }\n        switch (radix) {\n            case 2:\n                return invalidRadix2.test(res[3]) ? null : [res, 2];\n            case 8:\n                return invalidRadix8.test(res[3]) ? null : [res, 8];\n            case 10:\n                return invalidRadix10.test(res[3]) ? null : [res, 10];\n            case 16:\n                return [res, 16];\n            default:\n                throw new Error(\"Invalid Base.\");\n        }\n    }\n    return null;\n}\n// TODO does this perfectly match the .NET behavior ?\nexport function tryParse(s, radix, initial) {\n    const a = isValid(s, radix);\n    if (a !== null) {\n        const [[, prefix, , digits], radix_] = a;\n        const v = parseInt((prefix || \"\") + digits, radix_);\n        if (!Number.isNaN(v)) {\n            return [true, v];\n        }\n    }\n    return [false, initial];\n}\nexport function parse(s, radix) {\n    const a = tryParse(s, radix, 0);\n    if (a[0]) {\n        return a[1];\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Common/Markalc/Expression.fs","module Lexer\n\nopen Types\nopen Shared\nopen LexerShared\n\ntype LexerState =\n    | Normal\n    | InCodeBlock of content: string * Language\n    | InHTMLTag of tag: string * depth: int\n\nlet htmlSingleton = [\n    \"area\"; \"base\"; \"br\"; \"col\"; \"command\"; \"embed\"; \"hr\"; \"img\"; \"input\"\n    \"keygen\"; \"link\"; \"meta\"; \"param\"; \"source\"; \"track\"; \"wbr\"\n]\n\n/// An escaped char tokenizer, which identifies the escaped characters and returns them\n/// as a literal instead, without the leading '\\'\nlet (|EscapedCharTok|_|) = (|EscapedChar|_|) LITERAL charList\n\n/// Returns the Token type of the identifier token\nlet (|CharacterTok|_|) = (|Character|_|) charList\n\nlet (|MatchLang|_|) = function\n    | RegexMatch \"(p|P)ython\" _ -> Some Python | RegexMatch \"F#|fsharp|f#\" _ -> Some FSharp\n    | RegexMatch \"(C|c)(\\\\+\\\\+|pp)\" _ -> Some CPP | RegexMatch \"C|c\" _ -> Some C | _ -> Some Empty\n\nlet (|HTMLStartTag|_|) = (|RegexMatch|_|) \"^<([a-zA-Z]+)\\\\s*.*?>\"\n\nlet (|HTMLEndTag|_|) = (|RegexMatch|_|) \"^<\\\\/([a-zA-Z]+)\\\\s*.*?>\"\n\nlet (|HTMLSingleton|_|) = (|RegexMatch|_|) \"^<([a-zA-Z]+)\\\\s*.*?(?:\\\\/>|>)\"\n\nlet (|CodeBlockStart|_|) = (|GroupMatch|_|) \"^```+\\\\s*([a-zA-Z0-9+\\\\-_]*)\"\n\n/// Returns the next Token of a string\nlet nextToken state s =\n    match s, state with\n    | EscapedCharTok n, _ -> n, state\n    | HTMLStartTag (s, [t], r), Normal ->\n        (LITERAL s, r), InHTMLTag (t, 1)\n    | HTMLStartTag (s, [t], r), InHTMLTag (tag, d) ->\n        if t = tag then\n            (LITERAL s, r), InHTMLTag (tag, d+1)\n        else\n            (LITERAL s, r), InHTMLTag (tag, d)\n    | HTMLEndTag (s, [t], r), InHTMLTag (tag, d) ->\n        if t = tag then\n            if d = 1 then\n                (LITERAL s, r), Normal\n            else\n                (LITERAL s, r), InHTMLTag (tag, d-1)\n        else\n            (LITERAL s, r), InHTMLTag (tag, d)\n    | HTMLSingleton (s, _, r), _ ->\n        (LITERAL s, r), state\n    | RegexMatch \".*?(?=<)\" (s, _, r), InHTMLTag (t, d) ->\n        (LITERAL s, r), InHTMLTag (t, d)\n    | CharacterTok n, _ -> n, state\n    | RegexMatch @\"^\\s+\" (m, _, s), _ ->\n        (String.length m |> WHITESPACE, s), state\n    | RegexMatch \"^[0-9]+\" (m, _, s), _->\n        (NUMBER m, s), state\n    | RegexMatch (literalString charList) (m, _, s), _ ->\n        (LITERAL m, s), state\n    | s, _ ->\n        sprintf \"Unrecognised character: %A\" s |> sharedLog.Warn None\n        (toString s.[0] |> LITERAL, (sOnwards 1 s)), state\n\n/// Lexes a whole string and returns the result as a Token list\nlet lexS state source =\n    let rec lexS' state s tokList =\n        match s with\n        | \"\"-> ENDLINE :: tokList\n        | _ ->\n            let (nt, st'), nstate = nextToken state s\n            nt :: tokList |> lexS' nstate st'\n    match source, state with\n    | CodeBlockStart (MatchLang lang), Normal ->\n        [], InCodeBlock (\"\", lang)\n    | RegexMatch \"^```+\" _, InCodeBlock (s, lang) ->\n        [CODEBLOCK (s, lang); ENDLINE], Normal\n    | _, InCodeBlock (s, lang) ->\n            [], InCodeBlock (s+source+\"\\n\", lang)\n    | RegexMatch @\"^\\s*$\" _, _ ->\n        [ENDLINE], state\n    | _ ->\n        lexS' state source [] |> List.rev, state\n\n/// Return the correct token if it is not close properly at the end\nlet returnTokens = function\n    | _, InCodeBlock (s, l) ->\n        [CODEBLOCK (s, l); ENDLINE]\n    | tok, InHTMLTag (str, _) ->\n        tok @ [LITERAL str; ENDLINE]\n    | tok, _ ->\n        tok\n\n/// Lex a single string\nlet lex s =\n    lexS Normal s |> returnTokens\n\n/// Lexes a list of strings and returns the Token list\nlet lexList strl =\n    let f (flist, state) nstr =\n        let (lst, st) = lexS state nstr\n        flist @ lst, st\n    List.fold f ([], Normal) strl |> returnTokens\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Lexer/Lexer.fs","module Preprocessor\n\nopen FileIO\nopen Shared\nopen LexerShared\n\n// --------------------------------------------------\n// Tokenizer\n// --------------------------------------------------\n\n/// Token type for the preprocessor macros\ntype Token =\n    | LITERAL of string\n    | MACRO | OPENDEF | CLOSEDEF | OPENEVAL | CLOSEEVAL | LBRA | RBRA\n    | SEMICOLON | ENDLINE | BSLASH | INCLUDE\n\n/// Character list for the preprocessor\nlet charList = [\"{%\", OPENDEF; \"%}\", CLOSEDEF; \"{{\", OPENEVAL\n                \"}}\", CLOSEEVAL; \"(\", LBRA; \")\", RBRA; \";\", SEMICOLON;\n                \"\\\\\", BSLASH]\n\nlet keywordList = [\"macro\", MACRO; \"include\", INCLUDE]\n\n/// Check if a LITERAL is exclusively whitespace \nlet (|WhiteSpace|NonWhiteSpace|) = function\n    | LITERAL (RegexMatch @\"^\\s*$\" _) -> WhiteSpace\n    | _ -> NonWhiteSpace\n\n/// Matches all the escapable characters that are defined in charList\nlet (|EscapedCharParse|_|) = (|EscapedChar|_|) LITERAL charList\n\n/// Matches all the special characters that are defined in charList\nlet (|CharacterParse|_|) = (|Character|_|) charList\n\nlet (|KeywordParse|_|) = (|Character|_|) keywordList\n\n/// Converts a token list to a string\nlet tokToString tList =\n    let tokString st = function\n        | LITERAL l -> st+l\n        | t ->\n            match charList @ keywordList |> listTryFind t with\n            | Some s -> st+s\n            | _ -> st\n    List.fold tokString \"\" tList\n\n/// Retrieves the next token from a string and returns it, together\n/// with the rest of the string\nlet nextToken str =\n    let literalMatch = charList |> literalString\n    match str with\n    | EscapedCharParse n | CharacterParse n | KeywordParse n ->\n        n\n    | RegexMatch @\"^\\s+\" (m, _, r) ->\n        LITERAL m, r\n    | RegexMatch literalMatch (m, _, r) ->\n        LITERAL m, r\n    | _ ->\n        toString str.[0] |> LITERAL, str.[1..]\n\n/// Tokenizes a string and return it as a list of tokens\nlet tokenize str =\n    let rec pTokenize' tList str =\n        match str with\n        | \"\" ->\n            ENDLINE :: tList\n        | _ ->\n            let t, r = nextToken str\n            pTokenize' (t :: tList) r\n    pTokenize' [] str |> List.rev\n\n/// Tokenizes a list of strings and returns them as a single list of tokens\nlet tokenizeList = List.collect tokenize\n\n// --------------------------------------------------\n// Parser\n// --------------------------------------------------\n\n/// ArgumentList used in the substitution\ntype Argument<'T> = 'T list\n\n/// Type for a macro\ntype Macro<'T> = {Name: string; Args: string list; Body: 'T list}\n\n/// Type for a substitution\ntype Sub<'T> = {Name: string; Args: Argument<'T> list; Raw: string}\n\n/// Type of the parser elements\ntype Parser =\n    | MacroDefinition of Macro<Parser>\n    | MacroSubstitution of Sub<Parser>\n    | IncludeStatement of link: string\n    | ParseText of content: string\n    | ParseNewLine\n\n/// Return a parser list until it reaches the token\nlet findParseUntil otok ctok parser =\n    let rec findParseUntil' count parser retlist =\n        match parser with\n        | t :: tl when t = ctok && count = 1 ->\n            Some (retlist |> List.rev, tl)\n        | t :: tl when t = ctok ->\n            t :: retlist |> findParseUntil' (count - 1) tl\n        | t :: tl when t = otok ->\n            t :: retlist |> findParseUntil' (count + 1) tl\n        | t :: tl ->\n            t :: retlist |> findParseUntil' count tl\n        | [] -> None\n    findParseUntil' 1 parser []\n\n/// Splits a list on a specific element\nlet splitList esctok cltok tok list =\n    let rec splitList' curr final list =\n        match list with\n        | a :: tl when a = esctok ->\n            match findParseUntil esctok cltok tl with\n            | Some (l, tl) ->\n                splitList' (CLOSEEVAL :: (List.rev (a :: l)) @ curr) final tl\n            | _ ->\n                splitList' (a :: curr) final tl\n        | a :: tl when a = tok ->\n            splitList' [] (List.rev curr :: final) tl\n        | a :: tl ->\n            splitList' (a :: curr) final tl\n        | [] ->\n            List.rev curr :: final |> List.rev\n    splitList' [] [] list\n\nlet splitListEval = splitList OPENEVAL CLOSEEVAL SEMICOLON\n\n/// Strips whitespace from a token list\nlet stripWhiteSpace = function\n    | WhiteSpace :: tl | tl ->\n        match List.rev tl with\n        | WhiteSpace :: tl | tl ->\n            List.rev tl\n\n/// Returns if the start of the list of tokens matches a keyword\nlet (|KeyWord|_|) =\n    let listCheckExists t list =\n        list\n        |> List.map (fun (_, c) -> c)\n        |> List.exists ((=) t)\n    function\n    | WhiteSpace :: a :: tl | a :: tl ->\n        match listCheckExists a keywordList with\n        | true -> Some (a, tl)\n        | _ -> None\n    | _ -> None\n\n/// Checks if the Token list matches an argument list, which could be one of the\n/// following:\n/// (arg1; arg2)\n/// (arg 1; arg 2)\n/// (arg1)\n/// ()\nlet (|ParamList|_|) =\n    /// Matches if there is a list of literals, and returns all of them until it reaches\n    /// a Token that is not a literal\n    let rec (|NameList|_|) = function\n        | LITERAL n :: NameList (nList, r) ->\n            Some (n :: nList, r)\n        | LITERAL n :: r ->\n            Some ([n], r)\n        | _ -> None\n\n    /// Matches a semicolon separated list of Literal lists\n    let rec (|ParamList|_|) = function\n        | WhiteSpace :: tl | tl ->\n            match tl with\n            | NameList (n, SEMICOLON :: ParamList (lst, r)) ->\n                Some (List.fold (+) \"\" n :: lst, r)\n            | NameList (n, r) ->\n                Some ([List.fold (+) \"\" n], r)\n            | _ ->\n                Some ([], tl)\n    function\n    | WhiteSpace :: tl | tl ->\n        match tl with\n        | LBRA :: ParamList (nl, RBRA :: tl) ->\n            Some (nl, tl)\n        | _ -> None\n\nlet (|ArgList|_|) = function\n    WhiteSpace :: tl | tl ->\n        match tl with\n        | LBRA :: tl ->\n            match findParseUntil LBRA RBRA tl with\n            | Some (p, tl) ->\n                Some (splitListEval p |> List.map stripWhiteSpace, tl)\n            | _ -> None\n        | WhiteSpace :: tl ->\n            Some ([], tl)\n        | _ -> None\n\n/// Matches a literal, which will be the name of the function, which can be followed by\n/// an argument list\nlet (|Function|_|) = function\n    | WhiteSpace :: LITERAL n :: tl ->\n        match tl with\n        | ParamList (nl, WhiteSpace :: tl)\n        | ParamList (nl, tl) ->\n            Some (n, nl, tl)\n        | WhiteSpace :: t\n        | t ->\n            Some (n, [], t)\n    | _ -> None\n\n/// Matches the start syntax for a macro, the closing CLOSEDEF can be on a differen line and\n/// after a Parse list, so that is matched in the parse function\nlet (|MacroDef|_|) = function\n    | OPENDEF :: KeyWord (MACRO, Function f) ->\n        Some f\n    | _ -> None\n\n/// Matches an evaluation of a macro\nlet (|EvalDef|_|) = function\n    | OPENEVAL :: WhiteSpace :: tl | OPENEVAL :: tl ->\n        match tl with\n        | LITERAL n :: ArgList (nl, WhiteSpace :: CLOSEEVAL :: tl)\n        | LITERAL n :: ArgList (nl, CLOSEEVAL :: tl) ->\n            Some (n, nl, tl)\n        | LITERAL n :: WhiteSpace :: CLOSEEVAL :: tl\n        | LITERAL n :: CLOSEEVAL :: tl ->\n            Some (n, [], tl)\n        | _ -> None\n    | _ -> None\n\n/// Matches a special character or keyword\nlet (|SChar|_|) tok =\n    charList @ keywordList\n    |> List.map invTuple\n    |> Map.ofList\n    |> mapTryFind tok\n\n/// Include statement match\nlet (|Include|_|) = function\n    | OPENEVAL :: WhiteSpace :: tl | OPENEVAL :: tl ->\n        match tl with\n        | INCLUDE :: WhiteSpace :: LITERAL link :: WhiteSpace :: CLOSEEVAL :: tl\n        | INCLUDE :: WhiteSpace :: LITERAL link :: CLOSEEVAL :: tl -> Some (link, tl)\n        | _ -> None\n    | _ -> None\n\n/// Parses a Token list into a Parser list\nlet parse tList =\n\n    /// Returns the raw token list for a macro evaluation\n    let getRaw list =\n        let rec getRaw' list curr =\n            match list with\n            | CLOSEEVAL :: _ ->\n                CLOSEEVAL :: curr\n            | a :: tl ->\n                a :: curr |> getRaw' tl\n            | _ ->\n                curr\n        getRaw' list [] |> List.rev\n\n    /// The recursive part of the parser, which build the Parser list\n    let rec parse' endToken tList pList =\n        let pRec f c tl = f c :: pList |> parse' endToken tl\n        let recText = pRec ParseText\n        match tList, endToken with\n        | MacroDef (a, b, tl), _ ->\n            let p, tl' = parse' (Some CLOSEDEF) tl []\n            pRec MacroDefinition {Name=a; Args=b; Body=List.rev p} tl'\n        | EvalDef (n, args, tl), _ ->\n            let args' = List.map ((fun a -> parse' None a []) >> (fun (a, _) -> List.rev a)) args\n            pRec MacroSubstitution {Name=n; Args=args'; Raw=getRaw tList |> tokToString} tl\n        | Include (link, tl), _ ->\n            pRec IncludeStatement link tl\n        | ENDLINE :: tl, _ ->\n            pRec id ParseNewLine tl\n        | WhiteSpace :: a :: tl, Some e | a :: tl, Some e when e = a ->\n            match tl with\n            | WhiteSpace :: ENDLINE :: b\n            | WhiteSpace :: b\n            | ENDLINE :: b\n            | b ->\n                pList, b\n        | LITERAL f :: tl, _ ->\n            recText f tl\n        | SChar c :: tl, _ ->\n            recText c tl\n        | _ -> pList, []\n    let p, _ = parse' None tList []\n    List.rev p\n\n// --------------------------------------------------\n// Evaluation\n// --------------------------------------------------\n\n/// Evaluates and strips macros from the markdown, and also evaluates macro substitutions\n/// by seeing which macros are in scope or if the substitution is a parameter.\n/// This supports shadowing of previously defined macros, and scopes can be defined\n/// by declaring a macro inside another macro\nlet evaluateWithDir fileDir pList =\n\n    /// Makes an empty parmeter list for the current parameters, so that they\n    /// are not substituted\n    let makeEmptyParam args: Map<string, Argument<Parser> option> =\n        List.replicate (List.length args) None\n        |> List.zip args\n        |> Map.ofList\n\n    /// Add a parameter to a parameter map\n    let addParam p (macro: Macro<Parser>) args =\n        List.zip macro.Args args\n        |> List.fold (fun (s: Map<string, Argument<Parser> option>) (a, b) -> s.Add(a, Some b)) p\n\n    /// Make a Macro record type\n    let makeMacro n args p =\n        {Name = n; Args = args; Body = p}\n\n    /// Adds an element to a map with key k and value v\n    let mapAdd (map: Map<'a, 'b>) k v =\n        map.Add(k, v)\n\n    /// Evaluates and creates a new simplified Parser list with all the macros stripped\n    /// and substitutions evaluated\n    let rec evaluate' pList newPList param (scope: Map<string, Macro<Parser>>) =\n\n        /// Function for use with different currying that the original\n        let evaluateInv' pList newPList scope param =\n            evaluate' pList newPList param scope\n\n        /// Evaluate without adding any values to the param or scope maps\n        let evaluate'' pList list =\n            evaluate' pList (list @ newPList) param scope\n\n        match pList with\n        | MacroDefinition {Name=n; Args=args; Body=p} :: tl ->\n            makeEmptyParam args\n            |> evaluateInv' p [] scope\n            |> makeMacro n args\n            |> mapAdd scope n\n            |> evaluate' tl newPList param\n        | MacroSubstitution {Name=n; Args=args; Raw=raw} as ms :: tl ->\n            let eval =\n                match param.TryFind n with\n                | Some (Some x) ->\n                    evaluate' x [] param scope |> List.rev\n                | Some _ ->\n                    [ms]\n                | _ ->\n                    match scope.TryFind n with\n                    | Some m when List.isEmpty args ->\n                        m.Body\n                    | Some m ->\n                        addParam param m args\n                        |> evaluateInv' m.Body [] scope\n                        |> List.rev\n                    | _ ->\n                        [ParseText raw]\n            evaluate'' tl eval\n        | IncludeStatement link :: tl ->\n            let addDir str =\n                match str with\n                | RegexMatch \"^\\\\/\" _ -> str\n                | _ -> fileDir + str\n            addDir link\n            |> readFilePath\n            |> tokenizeList\n            |> parse\n            |> (fun a -> evaluate' a [] Map.empty<string, Argument<Parser> option> Map.empty<string, Macro<Parser>>)\n            |> evaluate'' tl\n        | p :: tl ->\n            evaluate'' tl [p]\n        | _ -> newPList\n    evaluate' pList [] Map.empty<string, Argument<Parser> option> Map.empty<string, Macro<Parser>>\n    |> List.rev\n\nlet evaluate = evaluateWithDir \"\"\n\n/// Converts a Parser list to a string\nlet parserToString pList =\n    List.fold (fun st -> function\n               | ParseText x -> st+x\n               | ParseNewLine -> st+\"\\n\"\n               | _ -> st) \"\" pList\n\n/// Converts a Parser list to a list of strings without any newlines\nlet toStringList pList =\n    let f st n =\n        match st, n with\n        | _, ParseNewLine ->\n            \"\" :: st\n        | a :: b, ParseText t ->\n            a+t :: b\n        | _, ParseText t ->\n            [t]\n        | _ -> st\n    List.fold f [] pList |> List.rev\n\n/// perform the parsing, evaluation, while stripping the last endline which is redundant\n/// as it was added by the tokenizer\nlet pETS dir =\n    let stripLastEndline l =\n        match List.rev l with\n        | [ParseNewLine] as e ->\n            e\n        | ParseNewLine :: r ->\n            List.rev r\n        | _ -> l\n    parse >> evaluateWithDir dir >> stripLastEndline\n\n// --------------------------------------------------\n// Public API\n//--------------------------------------------------\n\n/// Preprocess a string and output a string with the macro evaluated\nlet preprocess =\n    tokenize >> pETS \"\" >> parserToString\n\nlet preprocessWithDir dir =\n    tokenize >> pETS dir >> parserToString\n\n/// Preprocess a list of strings which is returned as a list of strings with the\n/// macro evaluated\nlet preprocessList =\n    List.collect tokenize >> pETS \"\" >> toStringList\n\nlet preprocessListWithDir dir =\n    List.collect tokenize >> pETS dir >> toStringList\n\n\n\n// WEBPACK FOOTER //\n// src/Common/Lexer/Preprocessor.fs","module FileIO\n\nopen Fable.Import.Node.Exports\n\nlet writeToFile str path =\n    let errorHandler _err = () // Ignore all errors\n    fs.writeFile(path, str, errorHandler)\n\nlet splitString (s:string) =\n    s.Split(\"\\n\") |> Array.toList\nlet readFilePath path =\n    fs.readFileSync(path,()) \n    |> (fun s -> s.toString ())\n    |> splitString\n\n\n\n\n// WEBPACK FOOTER //\n// src/Common/FableFileIO.fs","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 35\n// module chunks = 0","module HTMLGen\n\nopen Types\nopen Shared\nopen Logger\nopen HTMLGenHelpers\n\nlet dLogger = Logger(LogLevel.WARNING)\n\n/// convert TFrmtedString to string, with HTML tags where necessary\nlet rec strFStr fStr =\n    match fStr with\n    | Literal str -> str\n    | Code str -> str |> attachSimpleTag \"code\"\n    | Strong a -> strInlineElements a |> attachSimpleTag \"strong\"\n    | Emphasis e -> strInlineElements e |> attachSimpleTag \"em\"\n\n/// convert InlineElement list to string, with HTML tags where necessary\n/// not tail recursive because the code looks cleaner this way\nand strInlineElements eles =\n    let convertHtml pStr ele =\n        pStr +\n        match ele with\n        | FrmtedString fStr -> strFStr fStr\n        | Link (ht, url) -> strFStr ht |> attachHTMLTag (\"a\", [(\"href\", url)], true)\n        | Picture (alt, url) ->\n            let attrs = [(\"src\", url); (\"alt\", alt)]\n            attachHTMLTag (\"img\", attrs, false) \"\"\n    List.fold convertHtml \"\" eles\n\n/// process Markdown paragraph\nlet strParagraph lines =\n    let folder pLinesStr line =\n        pLinesStr + strInlineElements line + NewLineStr\n    List.fold folder \"\" lines\n    |> (fun x -> x.Trim()) // remove leading and trailing whitespaces and CRLFs\n    |> attachSimpleTag \"p\"\n\n\n/// process Markdown Table\nlet strTable (rows: PRow list) =\n    // filter out table header\n    let containHeader (row: PRow) =\n        //let PCells(_, isHeader) = row\n        match row with\n        | PCells(_, isHeader) ->\n            isHeader\n    let takeoutCells = List.map (fun pRow -> match pRow with | PCells(cells,_) -> cells)\n    let headerRows = List.filter (containHeader) rows |> takeoutCells\n    let bodyRows = List.filter (containHeader >> not) rows |> takeoutCells\n    let foldCells row =\n        let cellsFolder pStr cell =\n            match cell with\n            | CellLine(line, isHeader, align) ->\n                let tagName = if isHeader then \"th\" else \"td\"\n                let cellContent = strInlineElements line\n                let alignAttr =\n                    match align with\n                    | Centre -> (\"align\", \"center\")\n                    | Right -> (\"align\", \"right\")\n                    | Left -> (\"align\", \"left\")\n                    | NoAlign -> (\"\",\"\")\n                pStr + attachHTMLTag (tagName, [alignAttr], true) cellContent\n        List.fold cellsFolder \"\" row\n    let foldRows rows =\n        let rowsFolder pStr row =\n            foldCells row\n            |> attachSimpleTag \"tr\"\n            |> fun s -> pStr + s\n        List.fold rowsFolder \"\" rows\n    foldRows headerRows |> attachSimpleTag \"thead\"\n    |> fun s ->\n        s + (foldRows bodyRows |> attachSimpleTag \"tbody\")\n    |> attachSimpleTag \"table\"\n\n\n/// recursively process a list\nlet rec strList list =\n    let strListItem pStr li =\n        pStr + (\n            match li with\n            | StringItem(line) -> strInlineElements line |> attachSimpleTag \"li\"\n            | NestedList(list) -> strList list\n            )\n    match list with\n    | {ListType=lt; ListItem=liS} ->\n        let listTag = if lt=UL then \"ul\" else \"ol\"\n        List.fold strListItem \"\" liS\n        |> attachSimpleTag listTag\n\n/// process header\nlet strHeader header =\n    match header with\n    | {HeaderName=line;Level=lv} ->\n        let tagName = \"h\" + string(lv)\n        line\n        |> strInlineElements\n        |> attachSimpleTag tagName\n\n/// process inline footnotes\nlet strInlineFootnote fnId =\n    let idStr = match fnId with | FtID i -> string i | RefID s -> string s\n    idStr\n    |> attachHTMLTag (\"a\", [\"href\", \"#footnote-\"+idStr], true)\n    |> attachSimpleTag \"sup\"\n\n\nlet (|MatchHeaderAndSubHeader|_|) hds =\n    match hds with\n    | fstHd::sndHd::_ ->\n        let {Level=fstLv} = fstHd\n        let {Level=sndLv} =sndHd\n        if sndLv > fstLv then (List.head hds, List.tail hds) |> Some else None\n    | _ -> None\n\n/// process table of contents\n\nlet strToC (toc:Ttoc) =\n    let appendListItem s i =\n        {s with ListItem = i::(s.ListItem)}\n    let fstAppendListItem s i = \n        appendListItem (fst s) i\n    let appendToNested (s:TList) appendee =\n        // if List.head fst s is a nested list, append to that list\n        match s.ListItem with\n        | NestedList(l)::tail -> \n            sprintf \"Append to nested: %A\" appendee |> dLogger.Debug None\n            {s with ListItem = NestedList({l with ListItem = appendee::l.ListItem})::tail}\n        // otherwise if the latest element on the list isn't a nested list, just append\n        | _ -> sprintf \"Create nested with: %A\" appendee |> dLogger.Debug None \n               appendee |> appendListItem s\n    let appendToNestedD n (s:TList) appendee =\n        let getNest = function \n                | NestedList(l) -> l \n                | _ -> failwith \"Invalid depth.\"\n        let rec appendToNestedD' n s =\n            let recurse = function\n                | head::tail -> ((appendToNestedD' (n-1) (head |> getNest)).ListItem)@tail\n                | [] -> failwithf \"List shouldn't be empty: %A\" s\n            match (n,s) with\n            | (n,s) when n > 0 ->\n                {s with ListItem = recurse s.ListItem}\n            | (0,s) -> (appendee |> appendToNested s)\n            | (n,_) when n < 0 -> failwith \"Negative depth, shouldn't happen.\"\n            | _ -> failwithf \"n is: %i, s is: %A\" n s\n        appendToNestedD' n s\n    // Convert header list into a list item\n    let fold (s:(TList*int)) =\n        function\n        |  {HeaderName=headerName; Level=lv} when lv = 1\n        // If header has depth 1, put it in the main list\n            -> StringItem(headerName) |> fstAppendListItem s,lv\n        // If lv is > previous level, create nested list\n        | {HeaderName=headerName; Level=lv} when lv > snd s\n            ->  NestedList({ListType=OL;ListItem=[StringItem(headerName)];Depth=snd s})\n                |> appendToNestedD 0 (fst s), lv\n        // Append to current nested list\n        | {HeaderName=headerName; Level=lv} when lv = snd s\n            -> sprintf \"Append: %A %i\" headerName lv |> dLogger.Debug None\n               StringItem(headerName) |> appendToNested (fst s),lv\n        \n        | {HeaderName=headerName; Level=lv} when lv < snd s\n            ->  StringItem(headerName) |> appendToNestedD (lv-2) (fst s),lv\n        | _ -> s\n    let rec revList (l:TList) =\n        let rec revListItemList (li:TListItem list) =\n            let revRecurse = function \n                | NestedList(l)->NestedList({l with ListItem=(revListItemList l.ListItem)})\n                | l -> l\n            List.map revRecurse li\n            |> List.rev\n        {l with ListItem=List.rev (revListItemList l.ListItem)}\n    List.fold fold ({Depth=1; ListItem=[]; ListType=OL},1) (toc.HeaderLst)\n    |> fst\n    |> (fun l -> {l with ListItem=List.rev l.ListItem})\n    |> revList\n    |> strList\n\n/// gather footnotes for end of page display\nlet gatherFootnotes pObjs =\n    let footnotesFilter pObj =\n        match pObj with\n        | Footnote _ -> true\n        | _ -> false\n    List.filter footnotesFilter pObjs\n\n\n/// process HTML body part\nlet strBody pObjs =\n    let folder pStr pObj =\n        pStr +\n        match pObj with\n        | Paragraph p -> strParagraph p\n        | Quote q -> strInlineElements q |> attachSimpleTag \"q\"\n        | CodeBlock (c, l) -> attachHTMLTag (\"code\", [(\"language\", mapLang l)], true) c\n        | Table rows -> strTable rows\n        | List l -> strList l\n        | Header h -> strHeader h\n        | Footnote (fnId, _) -> strInlineFootnote fnId\n        | ContentTable toc -> strToC toc\n        | _ -> sprintf \"%A is not implemented\" pObj\n    List.fold folder \"\" pObjs\n\n\n/// generate HTML head\nlet genHead htmlTitle =\n    let metaData =\n        [\n            [(\"name\", \"viewport\");(\"content\", \"width=device-width\")]\n        ]\n    let genMetadata pStr md =\n        pStr + attachMetaTag \"meta\" md\n    List.fold genMetadata \"\" metaData\n    + attachSimpleTag \"title\" htmlTitle\n\n    |> attachSimpleTag \"head\"\n\n/// generate HTML body\nlet genBody pObjs =\n    strBody pObjs\n    |> attachSimpleTag \"body\"\n\n/// top level HTMLGen\nlet genHTML (htmlTitle, pObjs) =\n    attachMetaTag \"!DOCTYPE\" [\"html\", \"\"]\n    + genHead htmlTitle\n    + genBody pObjs\n\n\n// WEBPACK FOOTER //\n// src/Common/HTMLGen/HTMLGen.fs","module HTMLGenHelpers\n\nopen Types\n\ntype TagStyle = INLINE | NonInline of indentStr: string\n\n[<Literal>]\nlet NewLineStr = \"\\r\\n\"\n\n/// concat attributeName and value\n/// with quotes\nlet toAttr attributeName value =\n    attributeName + \"=\\\"\" + value + \"\\\"\"\n\n/// convert (attributeName, value) list to string list\n/// ready for inserting into HTML tag\nlet toAttrs attrs =\n    let mapper attr =\n        match attr with | (attrName, value) -> toAttr attrName value\n    List.map mapper attrs\n\n/// atach HTML tag to a given string, both start and end tag\n/// inline style does not insert newline after start tag and before end tag\n/// non-inline style will have indent set to desired string\nlet attachHTMLTag (tagName, attributes: list<string * string>, needCloseTag) (content: string) =\n    let attrStr =\n        match List.isEmpty attributes with\n        | true -> \"\"\n        | false ->\n            let attrFolder pStr attrNameValue =\n                pStr +\n                match attrNameValue with\n                | (\"\",\"\") -> \"\"\n                | (attrName, value) ->\n                    \" \" +       // space before attribute\n                    if value = \"\" then attrName\n                    else attrName + \"=\\\"\" + value + \"\\\"\"\n            List.fold attrFolder \"\" attributes\n    \"<\" + tagName + attrStr + \">\"\n    + content\n    + if needCloseTag then \"</\" + tagName + \">\" else \"\"\n\n/// attach (tagName,noAttr,closeTag)\nlet attachSimpleTag tagName = attachHTMLTag (tagName,[],true)\n\nlet attachMetaTag tagName attrs = attachHTMLTag (tagName,attrs,false) \"\"\n\n\n\n// WEBPACK FOOTER //\n// src/Common/HTMLGen/HTMLGenHelpers.fs","module MarkdownGen\n\nopen Types\nopen Shared\nopen Logger\n\nlet logger = Logger(LogLevel.INFO)\n\n// retunr string surrounded by pat\nlet surround pat str =\n    let pat2 = match pat with\n               | \"(\" -> \")\"\n               | \"[\" -> \"]\"\n               | \"{\" -> \"}\"\n               | _   -> pat\n    sprintf \"%s%s%s\" pat str pat2\n\n/// convert TFrmtedString to string\nlet rec mdFStr fStr =\n    match fStr with\n    | Literal str -> str\n    | Code str -> surround \"`\" str\n    | Strong a ->  mdInlineElements a |> surround \"**\"\n    | Emphasis e -> mdInlineElements e |> surround \"*\"\n\n/// convert InlineElement list to string, with HTML tags where necessary\n/// not tail recursive because the code looks cleaner this way\nand mdInlineElements' b eles =\n    let braSurround = surround \"(\"\n    let sbraSurround = surround \"[\"\n    let convertMd pStr ele =\n        pStr +\n        match ele with\n        | FrmtedString fStr -> mdFStr fStr\n        | Link (ht, url) -> (mdFStr ht |> sbraSurround) + (url |> braSurround)\n        | Picture (alt, url) -> (alt |> sbraSurround |> sprintf \"!%s\" ) +  (url |> braSurround)\n    List.fold convertMd (sprintf \"%s\" b) eles\nand mdInlineElements = mdInlineElements' \"\"\n\n/// process Markdown paragraph\nlet mdParagraph lines =\n    let folder pLinesStr line =\n        pLinesStr + mdInlineElements line\n    List.fold folder \"\" lines\n    + \"\\n\\n\"\n\n/// process Markdown Table\nlet mdTable (rows: PRow list) =\n    // filter out table header\n    let containHeader (row: PRow) =\n        //let PCells(_, isHeader) = row\n        match row with\n        | PCells(_, isHeader) ->\n            isHeader\n    let takeoutCells = List.map (fun pRow -> match pRow with | PCells(cells,_) -> cells)\n    let headerRows = List.filter (containHeader) rows |> takeoutCells\n    let bodyRows = List.filter (containHeader >> not) rows |> takeoutCells\n    let foldCells alignRow row =\n        let cellsFolder alignRow pStr cell =\n            match cell with\n            | CellLine(line, _, align) ->\n                match alignRow with\n                | true ->\n                    match align with\n                    | Centre -> \":---:\"\n                    | Right -> \"---:\"\n                    | Left -> \":---\"\n                    | NoAlign -> \"---\"\n                | false ->\n                    mdInlineElements line\n                |> (fun cellContent -> pStr + cellContent + \"|\")\n                \n        List.fold (cellsFolder alignRow) \"|\" row\n    \n    let foldRows alignRow rows =\n        let rowsFolder alignRow pStr row =\n            pStr + (foldCells alignRow) row + \"\\n\"\n        List.fold (rowsFolder alignRow) \"\" rows\n    let foldNormalRows = foldRows false\n    let foldAlignRow   = foldCells true\n    foldNormalRows headerRows\n    + (headerRows |> List.head |> foldAlignRow)\n    + foldNormalRows bodyRows + \"\\n\\n\"\n\n/// recursively process a list\nlet rec mdList list =\n    let mdListItem ord tab (pStr,pCount) li =\n            let retFold s = pStr + s, pCount + 1;\n            match li with\n            | StringItem(line) -> mdInlineElements line |> (fun s -> \n                if ord \n                then \n                    sprintf \"%s%i. %s\\n\" (String.replicate tab \"\\t\") pCount s\n                    |> logPassN logger.Debug\n                else sprintf \"%s- %s\\n\" (String.replicate tab \"\\t\") s) |> retFold\n            | NestedList(list) -> mdList list |> retFold\n            \n    match list with\n    | {ListType=lt; ListItem=liS; Depth=d} ->\n        let ord = lt=OL\n        List.fold (mdListItem ord (d-1)) (\"\",1) liS\n        |> fst\n\n/// process header\nlet mdHeader header =\n    match header with\n    | {HeaderName=line;Level=lv} ->\n        (line |> mdInlineElements)\n        |> sprintf \"%s %s\\n\" (String.replicate lv \"#\") \n\n/// process HTML body part\nlet mdBody pObjs =\n    let folder pStr pObj =\n        pStr +\n        match pObj with\n        | Paragraph p -> mdParagraph p\n        | Quote q -> mdInlineElements' \">\" q\n        | CodeBlock (c, l) -> surround \"```\" (mapLang l + \"\\n\" + c + \"\\n\")\n        | Table rows -> mdTable rows\n        | List l -> mdList l |> sprintf \"%s\\n\"\n        | Header h -> mdHeader h\n        //| Footnote (fnId, _) -> mdInlineFootnote fnId\n        | _ -> sprintf \"%A is not implemented\" pObj\n    List.fold folder \"\" pObjs\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// src/Common/MarkdownGen/MarkdownGen.fs"],"sourceRoot":""}